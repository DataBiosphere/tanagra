syntax = "proto3";

package tanagra.viz;

option java_package = "bio.terra.tanagra.proto.viz";
option java_outer_classname = "Viz";

// The configuration of a underlay or cohort level visualization.
message VizDataConfig {
  message Source {
    // The criteria selector (e.g. condition) determines which entities the data
    // is being pulled from.
    string criteriaSelector = 1;

    // Configuration of the specified criteria selection (e.g. to select
    // conditions under diabetes).
    optional string selectionData = 2;

    // For criteria selectors that return more than one entity.
    optional string entity = 3;

    message Join {
      // The next entity to join to in order to eventually get to the entity the
      // visualization is displaying (e.g. person when joining
      // condition_occurences to age).
      string entity = 1;

      message Aggregation {
        enum AggregationType {
          UNIQUE = 0;
          MIN = 1;
          MAX = 2;
          AVERAGE = 3;
        }

        // The type of aggregation being performed.
        optional AggregationType type = 1;

        // The output is always ids and values but aggregation may occur over
        // another field (e.g. date to find the most recent value).
        optional string attribute = 2;
      }

      // When joining an entity with an N:1 relationship (e.g. multiple weight
      // values to a person), an aggregation is often required to make the data
      // visualizable. For example, to visualize weight vs. race, each person
      // needs to have a single weight value associated with them, such as the
      // average or most recent. For simple cases, simply counting unique
      // instances of a related entity may be sufficient (e.g. to count people
      // with related condition occurrences).
      optional Aggregation aggregation = 2;
    }

    // To visualize data from different entities, the data must be joined to a
    // common entity. Each source must specify a series of joins that ends up at
    // the same entity if it does not already come from that entity.
    repeated Join joins = 4;

    message Attribute {
      // The attribute to read.
      string attribute = 1;

      // Converts a continuous numeric range into ids with count as the value.
      message NumericBucketing {
        // Buckets can be specified as either a list of thresholds or a range
        // and number of buckets. For thresholds [18, 45, 65], results in two
        // buckets [18, 45), and [45, 65). Lesser and greater buckets can be
        // added if desired.
        repeated double thresholds = 1;

        // For intervals {min:1, max:5, count: 2}, creates two buckets [1, 3)
        // and [3, 5).
        message Intervals {
          double min = 1;
          double max = 2;
          int64 count = 3;
        }
        optional Intervals intervals = 2;

        // Whether to create buckets for values outside of the explicitly
        // specified ones or ignore them.
        optional bool includeLesser = 3;
        optional bool includeGreater = 4;
      }

      oneof bucketing {
        NumericBucketing numeric_bucketing = 2;
      }

      enum SortType {
        UNKNOWN = 0;
        NAME = 1;
        VALUE = 2;
      }
      // How to sort this attribute for display. Defaults to NAME.
      optional SortType sort_type = 3;

      // Whether to sort in descending order.
      optional bool sort_descending = 4;

      // Whether a limited amount of data should be returned (e.g. 10 most
      // common conditions).
      optional int64 limit = 5;
    }

    // Which attributes should be returned from the selected data source (e.g.
    // condition_name from condition_occurrence or age from person).
    repeated Attribute attributes = 5;
  }

  // The visualization must have one or two sources of data to display.
  repeated Source sources = 1;
}

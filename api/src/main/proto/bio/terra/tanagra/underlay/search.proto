// Messages describing how to construct Tanagra entity searches.

syntax = "proto3";

package bio.terra.tanagra.underlay;
option java_package = "bio.terra.tanagra.proto.underlay";
option java_multiple_files = true;

import "bio/terra/tanagra/underlay/entities.proto";
import "bio/terra/tanagra/underlay/mapping.proto";

// The schema of how an entity filter can be constructed for a given entity.
message EntityFiltersSchema {
  // The name of the entity supported by this filter.
  string entity = 1;

  repeated FilterableAttribute attributes = 2;

  repeated FilterableRelationship relationships = 3;
}

// An attribute on an entity that may be used for filtering with hints on how to find
// interesting values.
message FilterableAttribute {
  // The name of the attribute that can be used in the entity filter.
  string attribute_name = 1;

  // Hints are usually but not necessarily exclusive.

  optional EntitySearchHint entity_search_hint = 2;

  optional EnumHint enum_hint = 3;

  optional IntegerBoundsHint integer_bounds_hint = 4;
}

// A hint for a filterable attribute where the values are the primary id of an
// entity with search support.
// TODO revisit me with a clearer sense of entity search APIs.
message EntitySearchHint {
  // The name of the entity that can be searched on.
  string entity = 1;
}

// A hint for a filterable attribute where the values are enumerable.
message EnumHint {

  repeated EnumHintValue enumHintValues = 1;
}

// A possible enum value for an enum hint for a filterable attribute.
message EnumHintValue {
  // A display name for this enum value.
  string display_name = 1;

  // A description for this enum value.
  string description = 2;

  // The value for the attribute to take.
  oneof value {
    int64 int64_val = 3;
    string string_val = 4;
    bool bool_val = 5;
  }
}

// A hint for a filterable attribute that the values are within certain bounds.
message IntegerBoundsHint {
  optional int64 min = 1;
  optional int64 max = 2;
}

// A relationship on an entity that may be used in an entity filter.
message FilterableRelationship {
  // The name of the relationship.
  string relationship_name = 1;
  // The schema of the filter available on the related entity.
  EntityFiltersSchema entity_filters_schema = 3;
}

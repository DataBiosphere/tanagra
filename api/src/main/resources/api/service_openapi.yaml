openapi: 3.0.3
info:
  title: Tanagra Service API
  description: github.com/DataBiosphere/tanagra
  version: 0.0.0

servers:
  - url: /

paths:
  "/status":
    get:
      security: []
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [Unauthenticated]
      responses:
        200:
          description: Service can process requests
        500:
          description: Service is broken

  "/underlays":
    get:
      parameters:
        - $ref: "#/components/parameters/PageSize"
        - $ref: "#/components/parameters/PageToken"
      # TODO authorization
      security: []
      summary: Lists the underlays.
      operationId: listUnderlays
      tags: [Underlays]
      responses:
        200:
          $ref: "#/components/responses/ListUnderlaysResponse"

  "/underlays/{underlayName}":
    parameters:
      - $ref: "#/components/parameters/Underlay"
    get:
      # TODO authorization
      security: []
      summary: Get info on an underlay.
      operationId: getUnderlay
      tags: [Underlays]
      responses:
        200:
          $ref: "#/components/responses/GetUnderlayResponse"

  "/underlays/{underlayName}/entities":
    parameters:
      - $ref: "#/components/parameters/PageSize"
      - $ref: "#/components/parameters/PageToken"
      - $ref: "#/components/parameters/Underlay"
    get:
      # TODO authorization
      security: []
      summary: Returns the entities in the underlay.
      operationId: listEntities
      tags: [Entities]
      responses:
        200:
          $ref: "#/components/responses/ListEntitiesResponse"

  "/underlays/{underlayName}/entities/{entityName}":
    parameters:
      - $ref: "#/components/parameters/Underlay"
      - $ref: "#/components/parameters/Entity"
    get:
      # TODO authorization
      security: []
      summary: Get info on an entity in an underlay.
      operationId: getEntity
      tags: [Entities]
      responses:
        200:
          $ref: "#/components/responses/GetEntityResponse"

  # TODO implement "real" export endpoints
  "/underlays/{underlayName}/entities/{entityName}/filters:generateSqlQuery":
    parameters:
      - $ref: "#/components/parameters/Underlay"
      - $ref: "#/components/parameters/Entity"
    post:
      # TODO authorization
      security: []
      summary: Returns an SQL query for listing all of an Entity's primary keys.
      operationId: generateSqlQuery
      tags: [EntitiesFilters]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityFilter"
      responses:
        200:
          $ref: "#/components/responses/SqlQueryResponse"

  # TODO implement "real" export endpoints
  "/underlays/{underlayName}/entities/{entityName}/instances:generateSqlQuery":
    parameters:
      - $ref: "#/components/parameters/Underlay"
      - $ref: "#/components/parameters/Entity"
    post:
      # TODO authorization
      security: []
      summary: Returns an SQL query for selecting a dataset of entity instances.
      operationId: generateDatasetSqlQuery
      tags: [EntityInstances]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateDatasetSqlQueryRequest"
      responses:
        200:
          $ref: "#/components/responses/SqlQueryResponse"

  "/underlays/{underlayName}/entities/{entityName}/instances:search":
    parameters:
      - $ref: "#/components/parameters/Entity"
      - $ref: "#/components/parameters/PageSize"
      - $ref: "#/components/parameters/PageToken"
      - $ref: "#/components/parameters/Underlay"
    post:
      # TODO authorization
      security: []
      summary: Search for entity instances
      operationId: searchEntityInstances
      tags: [EntityInstances]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchEntityInstancesRequest"
      responses:
        200:
          $ref: "#/components/responses/SearchEntityInstancesResponse"

  "/underlays/{underlayName}/entities/{entityName}/counts:generateSqlQuery":
    parameters:
      - $ref: "#/components/parameters/Underlay"
      - $ref: "#/components/parameters/Entity"
    post:
      # TODO authorization
      security: []
      summary: Returns an SQL query for counting a group of entity instances.
      operationId: generateCountsSqlQuery
      tags: [EntityCounts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GenerateCountsSqlQueryRequest"
      responses:
        200:
          $ref: "#/components/responses/SqlQueryResponse"

  "/underlays/{underlayName}/entities/{entityName}/counts:search":
    parameters:
      - $ref: "#/components/parameters/Underlay"
      - $ref: "#/components/parameters/Entity"
    post:
      # TODO authorization
      security: []
      summary: Count the group of entity instances, defined by a set of attribute values.
      operationId: searchEntityCounts
      tags: [EntityCounts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SearchEntityCountsRequest"
      responses:
        200:
          $ref: "#/components/responses/SearchEntityCountsResponse"

  #########################UNDERLAY CONFIG V2 [START]#################################
  "/v2/underlays":
    get:
      summary: List the underlays
      operationId: listUnderlaysV2
      tags: [UnderlaysV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnderlayListV2"
        500:
          $ref: '#/components/responses/ServerError'

  "/v2/underlays/{underlayName}":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
    get:
      summary: Get an underlay
      operationId: getUnderlayV2
      tags: [UnderlaysV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnderlayV2"
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  "/v2/underlays/{underlayName}/entities":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
    get:
      summary: List the entities in an underlay
      operationId: listEntitiesV2
      tags: [EntitiesV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityListV2"
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  "/v2/underlays/{underlayName}/entities/{entityName}":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
      - $ref: "#/components/parameters/EntityNameV2"
    get:
      summary: Get an entity
      operationId: getEntityV2
      tags: [EntitiesV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityV2"
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  "/v2/underlays/{underlayName}/entities/{entityName}/instances":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
      - $ref: "#/components/parameters/EntityNameV2"
    post:
      summary: Query entity instances
      operationId: queryInstances
      tags: [InstancesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceListV2"
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  "/v2/underlays/{underlayName}/entities/{entityName}/counts":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
      - $ref: "#/components/parameters/EntityNameV2"
    post:
      summary: Count entity instances
      operationId: countInstances
      tags: [InstancesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountQueryV2'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceCountListV2"
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/ServerError'

  #########################UNDERLAY CONFIG V2 [END]###################################

components:
  parameters:
    Underlay:
      name: underlayName
      in: path
      description: The name of the dataset underlay.
      required: true
      schema:
        type: string

    Entity:
      name: entityName
      in: path
      description: The name of an entity.
      required: true
      schema:
        type: string

    PageSize:
      name: pageSize
      in: query
      description: |
        The maximum number of results to return in this page. The server may return less.
        If 0 or unspecified, the server will decide the number of results.
      schema:
        type: integer
        minimum: 0
        default: 0

    PageToken:
      name: pageToken
      in: query
      description: An opaque pagination token to retrieve a specific page of results
      schema:
        type: string

  #########################UNDERLAY CONFIG V2 [START]#################################
    UnderlayNameV2:
      name: underlayName
      in: path
      description: Name of the underlay
      required: true
      schema:
        type: string

    EntityNameV2:
      name: entityName
      in: path
      description: Name of the entity
      required: true
      schema:
        type: string
  #########################UNDERLAY CONFIG V2 [END]###################################


  responses:
    GetEntityResponse:
      description: Response to get an entities.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Entity"

    GetUnderlayResponse:
      description: Response to get an underlay.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Underlay"

    ListEntitiesResponse:
      description: Response to list the entities.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListEntitiesResponse"

    ListUnderlaysResponse:
      description: Response to list the underlays.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ListUnderlaysResponse"

    SearchEntityInstancesResponse:
      description: Response to searching the entity instances.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchEntityInstancesResponse"

    SearchEntityCountsResponse:
      description: Response to searching the entity counts.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SearchEntityCountsResponse"

    SqlQueryResponse:
      description: A raw SQL query.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SqlQuery"

  #########################UNDERLAY CONFIG V2 [START]#################################
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
  #########################UNDERLAY CONFIG V2 [END]###################################


  schemas:
    Attribute:
      description: An attribute of an entity.
      type: object
      properties:
        name:
          description: The name of the attribute
          type: string
        dataType:
          $ref: "#/components/schemas/DataType"
        attributeFilterHint:
          $ref: "#/components/schemas/AttributeFilterHint"
          nullable: true

    AttributeFilterHint:
      type: object
      description: |
        How a filtering expression for an attribute can be constructed. If null, this attribute
        should not be used in filter expressions.
      properties:
        entitySearchHint:
          $ref: "#/components/schemas/EntitySearchHint"
        enumHint:
          $ref: "#/components/schemas/EnumHint"
        integerBoundsHint:
          $ref: "#/components/schemas/IntegerBoundsHint"

    # Attribute Filter Hints

    # TODO revisit me once we have clearer entity search APIs.
    EntitySearchHint:
      type: object
      description: |
        A hint for an attribute filter that the values are the primary id of an entity with
        search support.
      properties:
        entityName:
          description: The name of the entity.
          type: string

    EnumHint:
      type: object
      description: |
        A hint for a attribute filter that the values are enumerable.
      properties:
        enumHintValues:
          type: array
          items:
            $ref: "#/components/schemas/EnumHintValue"

    EnumHintValue:
      type: object
      description: A possible enum value for an enum hint for a attribute filter.
      properties:
        displayName:
          type: string
          description: The name to display for this enum value.
        description:
          type: string
          description: The more detailed description of this enum value, if there is one.
          nullable: true
        attributeValue:
          description: The value that the attribute takes.
          $ref: "#/components/schemas/AttributeValue"

    IntegerBoundsHint:
      type: object
      description: A hint for a attribute filter that the values are within certain bounds.
      properties:
        min:
          type: integer
          format: int64
          nullable: true
          description: The possible minimum value for this attribute, if there is one.
        max:
          type: integer
          format: int64
          nullable: true
          description: The possible maximum value for this attribute, if there is one.
    # End Attribute Filter Hints

    AttributeVariable:
      description: An attribute of a variable for an entity.
      type: object
      required: [name, variable]
      properties:
        name:
          description: The name of the attribute.
          type: string
        variable:
          description: The name of the variable.
          type: string

    AttributeValue:
      type: object
      description: |
        A possible value of an attribute. Exactly one field must be specified, or else the object
        must be null to represent NULL.
      nullable: true
      properties:
        int64Val:
          type: integer
          format: int64
        stringVal:
          type: string
        boolVal:
          type: boolean

    DataType:
      description: Enum of data types
      type: string
      enum: ["INT64", "STRING", "BOOL"]

    Entity:
      type: object
      description: A relational logical entity supported by an Underlay.
      properties:
        name:
          # TODO consider a display name.
          description: The name of the entity.
          type: string
        attributes:
          description: The attributes that make up the entity.
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
        relationships:
          description: The relationships that the entity is a part of.
          type: array
          items:
            $ref: "#/components/schemas/Relationship"

    EntityDataset:
      description: A selection of entity attributes and filters on them.
      type: object
      properties:
        entityVariable:
          description: The variable to use for the primary entity in the filter.
          type: string
        selectedAttributes:
          description: The name of the attributes of the primary entity to select for the dataset.
          type: array
          items:
            type: string
        orderByAttribute:
          description: The name of one of the selected attributes of the primary entity to order the selection by.
          type: string
        orderByDirection:
          description: The direction to order the results in. Defaults to ascending.
          nullable: true
          $ref: "#/components/schemas/OrderByDirection"
        filter:
          $ref: "#/components/schemas/Filter"
        limit:
          description: The maximum number of results to return.
          type: integer

    EntityCounts:
      description: The definition and count for a group of entity instances.
      type: object
      properties:
        entityVariable:
          description: The variable to use for the primary entity in the filter.
          type: string
        additionalSelectedAttributes:
          description: The name of any additional attributes of the primary entity to select for the dataset, in addition to the group by attributes.
          type: array
          items:
            type: string
        groupByAttributes:
          description: The names of the attributes to group by.
          type: array
          items:
            type: string
        filter:
          $ref: "#/components/schemas/Filter"

    OrderByDirection:
      description: Enum for order by direction
      type: string
      enum: ["ASC", "DESC"]

    EntityFilter:
      description: A filter to apply to the given entity.
      type: object
      properties:
        entityVariable:
          description: The variable to use for the top level entity in the filter.
          type: string
        filter:
          $ref: "#/components/schemas/Filter"

    ListEntitiesResponse:
      type: object
      description: A response for a list of Entities.
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"
        nextPageToken:
          $ref: "#/components/schemas/NextPageToken"

    SqlQuery:
      type: object
      description: A raw SQL query.
      properties:
        # TODO consider deleting this object.
        # TODO consider parameterizing the query
        # TODO consider indicating the database this is generated for.
        query:
          type: string

    # Filters
    Filter:
      type: object
      description: |
        Base Filter type that contains one-of any Filter subtype.
        If null, no filter is applied and everything is allowed.
        OpenApi inheritance and one-of code generation support are not great, so we roll our own.
      nullable: true
      properties:
        arrayFilter:
          $ref: "#/components/schemas/ArrayFilter"
        binaryFilter:
          $ref: "#/components/schemas/BinaryFilter"
        relationshipFilter:
          $ref: "#/components/schemas/RelationshipFilter"
        textSearchFilter:
          $ref: "#/components/schemas/TextSearchFilter"
        unaryFilter:
          $ref: "#/components/schemas/UnaryFilter"
        # TODO allow aggregations in filters.

    ArrayFilter:
      type: object
      description: A filter function for operating on N operands.
      properties:
        operands:
          type: array
          items:
            $ref: "#/components/schemas/Filter"
        operator:
          $ref: "#/components/schemas/ArrayFilterOperator"

    ArrayFilterOperator:
      description: Enum for array function operators
      type: string
      enum: ["AND", "OR"]

    UnaryFilter:
      type: object
      description: A filter function for operating on a single operand.
      properties:
        operand:
          type: object
          $ref: "#/components/schemas/Filter"
        operator:
          $ref: "#/components/schemas/UnaryFilterOperator"

    UnaryFilterOperator:
      description: Enum for unary function operators
      type: string
      enum: ["NOT"]

    BinaryFilter:
      type: object
      description: |
        A binary filter function. Function ordered as `attributeVariable operator attributeValue`
      # TODO allow comparing two AttributeVariables
      properties:
        attributeVariable:
          $ref: "#/components/schemas/AttributeVariable"
        operator:
          $ref: "#/components/schemas/BinaryFilterOperator"
        attributeValue:
          $ref: "#/components/schemas/AttributeValue"

    BinaryFilterOperator:
      description: Enum for binary function operators
      type: string
      enum:
        [
          "EQUALS",
          "NOT_EQUALS",
          "LESS_THAN",
          "GREATER_THAN",
          "DESCENDANT_OF_INCLUSIVE",
          "CHILD_OF",
        ]

    RelationshipFilter:
      type: object
      description: |
        A filter that requires a relationship between an entity variable and another entity.
      properties:
        outerVariable:
          description: |
            A variable that already exists that must have the relationship described by this filter.
          type: string
        newVariable:
          description: The name of the new variable that must be related to the outerVariable.
          type: string
        newEntity:
          description: The name of the type of entity the newVariable is.
          type: string
        filter:
          $ref: "#/components/schemas/Filter"

    TextSearchFilter:
      type: object
      description: |
        A filter for finding entity instances that match a free form text search.
      properties:
        entityVariable:
          description: The variable of the entity to apply the text search to.
          type: string
        term:
          description: The text to search for.
          type: string
    # End Filters

    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    GenerateDatasetSqlQueryRequest:
      type: object
      properties:
        entityDataset:
          $ref: "#/components/schemas/EntityDataset"

    GenerateCountsSqlQueryRequest:
      type: object
      properties:
        entityCounts:
          $ref: "#/components/schemas/EntityCounts"

    NextPageToken:
      type: string
      description: |
        The pagination token to retrieve the next page of results. If empty, there are no
        further results. Set as the PageToken in the next request.

    Underlay:
      type: object
      description: An underlay dataset used to power a Tanagra experience.
      properties:
        name:
          description: The name of the Underlay.
          type: string
        entityNames:
          description: The names of the entities in the Underlay.
          type: array
          items:
            type: string
        uiConfiguration:
          description: Underlay specific configuration for the UI.
          type: string

    ListUnderlaysResponse:
      type: object
      description: A list of Underlays.
      properties:
        underlays:
          type: array
          items:
            $ref: "#/components/schemas/Underlay"
        nextPageToken:
          $ref: "#/components/schemas/NextPageToken"

    Relationship:
      type: object
      description: A relationship to another entity.
      properties:
        name:
          type: string
          description: The name of the relationship.
        relatedEntity:
          type: string
          description: The name of the related entity.
        filterable:
          type: boolean
          description: |
            Whether this relationship should be used when creating filter expressions on the
            entity referencing this relationship. If true, then further filters can be specified
            on the relatedEntity.

    SearchEntityInstancesRequest:
      type: object
      description: A request for searching entity instances.
      properties:
        entityDataset:
          $ref: "#/components/schemas/EntityDataset"

    SearchEntityInstancesResponse:
      type: object
      description: A view of entity instances for a search request.
      properties:
        instances:
          type: array
          description: Repeated instances results of the search.
          nullable: true
          items:
            $ref: "#/components/schemas/EntityInstanceStruct"
        nextPageToken:
          $ref: "#/components/schemas/NextPageToken"

    EntityInstanceStruct:
      type: object
      description: A map of an entity instance attribute names to their value for this instance.
      additionalProperties:
        type: object
        nullable: true
        $ref: "#/components/schemas/AttributeValue"

    SearchEntityCountsRequest:
      type: object
      description: A request for counting groups of entity instances.
      properties:
        entityCounts:
          $ref: "#/components/schemas/EntityCounts"

    SearchEntityCountsResponse:
      type: object
      description: A view of entity counts for a search request.
      properties:
        counts:
          type: array
          description: Repeated counts results of the search.
          nullable: true
          items:
            $ref: "#/components/schemas/EntityCountStruct"
        nextPageToken:
          $ref: "#/components/schemas/NextPageToken"

    EntityCountStruct:
      type: object
      description: The definition and count for a group of entity instances.
      properties:
        count:
          type: integer
          description: The number of entity instances in this group.
        definition:
          type: object
          description: The set of attribute names and values that defines this group of entity instances.
          $ref: "#/components/schemas/EntityCountGroupDefinitionStruct"

    EntityCountGroupDefinitionStruct:
      type: object
      description: The definition of a group of entity instances.
      additionalProperties:
        type: object
        description: The set of attribute names and values that defines this group of entity instances.
        $ref: "#/components/schemas/AttributeValue"

    UserData:
      type: object
      description: The root container for user generated data.
      properties:
        version:
          type: integer
          description: The version of UserData to support forward and backward compatibility.
        cohorts:
          type: array
          description: User generated cohorts.
          items:
            $ref: "#/components/schemas/Cohort"
        conceptSets:
          type: array
          description: User generated concept sets.
          items:
            $ref: "#/components/schemas/ConceptSet"
      required:
        - version
        - cohorts
        - conceptSets

    Cohort:
      type: object
      description: A user generated cohort.
      properties:
        id:
          type: string
          description: The unique id of this cohort.
        name:
          type: string
          description: The name of this cohort.
        underlayName:
          type: string
          description: The underlay this cohort is based on.
        groups:
          type: array
          description: The criteria groups that make up this cohort.
          items:
            $ref: "#/components/schemas/Group"
      required:
        - id
        - name
        - underlayName
        - groups

    Group:
      type: object
      description: A group of criteria.
      properties:
        id:
          type: string
          description: The unique id of this group.
        name:
          type: string
          description: The name of this group if customized.
        filter:
          $ref: "#/components/schemas/GroupFilter"
        criteria:
          type: array
          description: The criteria that make of this group.
          items:
            $ref: "#/components/schemas/Criteria"
      required:
        - id
        - kind
        - filter
        - underlayName
        - criteria

    GroupFilter:
      type: object
      description: |
        A filter for a list of criteria that indicates how to combine the states
        of the individual criteria.
      properties:
        kind:
          type: string
          description: The kind of this group.
          enum: ["ANY", "ALL"]
        excluded:
          type: boolean
          description: This group should be excluded instead of included.
      required:
        - kind
        - excluded

    ConceptSet:
      type: object
      description: A user generated concept set.
      properties:
        id:
          type: string
          description: The unique id of this concept set.
        underlayName:
          type: string
          description: The underlay this concept set is based on.
        criteria:
          $ref: "#/components/schemas/Criteria"
      required:
        - id
        - underlayName
        - criteria

    Criteria:
      type: object
      description: A single criteria in a cohort or concept set.
      properties:
        id:
          type: string
          description: The unique id of this criteria.
        type:
          type: string
          description: The plugin type used by this criteria.
        data:
          type: object
          description: The plugin specific data that defines this criteria.
        config:
          type: object
          description: The UI configuration used by this criteria.
          $ref: "#/components/schemas/CriteriaConfig"
      required:
        - id
        - type
        - data
        - config

    CriteriaConfig:
      type: object
      description: The configuration for an instance of a cohort plugin. Fields related to individual plugins may also be present.
      properties:
        type:
          type: string
          description: The plugin type to use for this criteria.
        id:
          type: string
          description: The unique id of this criteria config.
        title:
          type: string
          description: The display title for this criteria.
      required:
        - type
        - id
        - title
      additionalProperties: true

    #########################UNDERLAY CONFIG V2 [START]#################################
    UnderlayV2:
      type: object
      description: Underlay
      properties:
        name:
          description: Name
          type: string
        displayName:
          description: Display name
          type: string
        primaryEntity:
          description: Primary entity name
          type: string
        uiConfiguration:
          description: UI configuration
          type: string
      required:
        - name
        - primaryEntity

    UnderlayListV2:
      type: object
      description: List of underlays
      properties:
        underlays:
          type: array
          items:
            $ref: "#/components/schemas/UnderlayV2"

    EntityV2:
      type: object
      description: Entity
      properties:
        name:
          description: Name
          type: string
        idAttribute:
          description: ID attribute name
          type: string
        attributes:
          description: List of attributes
          type: array
          items:
            $ref: "#/components/schemas/AttributeV2"
      required:
        - name
        - idAttribute

    EntityListV2:
      type: object
      description: List of entities
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/EntityV2"

    AttributeV2:
      type: object
      description: Entity attribute
      properties:
        name:
          description: Name
          type: string
        type:
          description: Attribute type
          type: string
          enum: ["SIMPLE", "KEY_AND_DISPLAY"]
        dataType:
          $ref: "#/components/schemas/DataTypeV2"
        displayHint:
          type: object
          description: Display hint calculated from source data
          properties:
            enumHint:
              $ref: "#/components/schemas/DisplayHintEnumV2"
            numericRangeHint:
              $ref: "#/components/schemas/DisplayHintNumericRangeV2"
          nullable: true

    DisplayHintEnumV2:
      type: object
      description: Enumeration of possible values and display strings
      properties:
        enumHintValues:
          type: array
          items:
            $ref: "#/components/schemas/ValueDisplayV2"

    DisplayHintNumericRangeV2:
      type: object
      description: Maximum and minimum values
      properties:
        min:
          description: Max value
          type: integer
          format: int64
        max:
          description: Min value
          type: integer
          format: int64

    ValueDisplayV2:
      type: object
      description: Attribute value and optional display string
      properties:
        value:
          description: Literal value
          $ref: "#/components/schemas/LiteralV2"
        display:
          type: string
          description: Optional display string
          nullable: true

    LiteralV2:
      type: object
      description: Union of references to each value type. Exactly one will be populated based on the dataType.
      nullable: true
      properties:
        dataType:
          $ref: "#/components/schemas/DataTypeV2"
        valueUnion:
          type: object
          properties:
            boolVal:
              type: boolean
            int64Val:
              type: integer
              format: int64
            stringVal:
              type: string
            dateVal:
              type: string
              description: Format YYYY-MM-DD

    DataTypeV2:
      type: string
      enum: ["INT64", "STRING", "BOOLEAN", "DATE"]

    QueryV2:
      type: object
      description: Query for entity instances
      properties:
        includeAttributes:
          description: Attributes to include in the returned instances
          type: array
          items:
            type: string
        includeHierarchyFields:
          description: Hierarchy fields to include in the returned instances. All fields will be returned for each hierarchy specified.
          type: object
          properties:
            hierarchies:
              type: array
              description: Hierarchy names
              items:
                type: string
            fields:
              type: array
              items:
                type: string
                enum: ["IS_MEMBER", "PATH", "NUM_CHILDREN", "IS_ROOT"]
        filter:
          $ref: "#/components/schemas/FilterV2"
        orderBy:
          type: object
          description: Attributes and direction to order the results by
          properties:
            attributes:
              type: array
              items:
                type: string
            direction:
              description: Defaults to ascending
              type: string
              enum: ["ASCENDING", "DESCENDING"]
          nullable: true
        limit:
          type: integer
          description: Maximum number of results to return. Defaults to 250.
          default: 250

    CountQueryV2:
      type: object
      description: Count entity instances
      properties:
        attributes:
          description: |
            Attributes to group by. One count will be returned for each possible combination of attribute values 
            (e.g. [gender, hair_color] will return counts for man+red, man+black, woman+red, woman+black).
          type: array
          items:
            type: string
        filter:
          $ref: "#/components/schemas/FilterV2"

    FilterV2:
      type: object
      description: Union of references to each filter type. Exactly one should be specified based on the filterType.
      properties:
        filterType:
          type: string
          enum: ["ATTRIBUTE", "TEXT", "HIERARCHY", "RELATIONSHIP", "BOOLEAN_LOGIC"]
        filterUnion:
          type: object
          properties:
            attributeFilter:
              $ref: "#/components/schemas/AttributeFilterV2"
            textFilter:
              $ref: "#/components/schemas/TextFilterV2"
            hierarchyFilter:
              $ref: "#/components/schemas/HierarchyFilterV2"
            relationshipFilter:
              $ref: "#/components/schemas/RelationshipFilterV2"
            booleanLogicFilter:
              $ref: "#/components/schemas/BooleanLogicFilterV2"

    AttributeFilterV2:
      type: object
      description: Filter on an attribute value (e.g. color=red)
      properties:
        attribute:
          type: string
        operator:
          type: string
          enum: ["EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN"]
        value:
          $ref: "#/components/schemas/LiteralV2"

    TextFilterV2:
      type: object
      description: Filter on a text search (e.g. person sounds like Joe)
      properties:
        matchType:
          type: string
          enum: ["EXACT_MATCH", "FUZZY_MATCH"]
        attribute:
          type: string
          description: |
            Attribute to match on. If not specified, then we match on whatever is specified in the text search mapping config.
            Currently, fuzzy match only works on a single attribute (i.e. you must specify this field for fuzzy match).
        text:
          type: string

    HierarchyFilterV2:
      type: object
      description: Filter on a hierarchy (e.g. descendant of id=12)
      properties:
        hierarchy:
          description: Name of the hierarchy
          type: string
        operator:
          type: string
          enum: ["CHILD_OF", "DESCENDANT_OF_INCLUSIVE", "IS_ROOT"]
        value:
          $ref: "#/components/schemas/LiteralV2"

    RelationshipFilterV2:
      type: object
      description: Filter on a relationship between entities (e.g. condition occurrences where condition=diabetes)
      properties:
        entity:
          type: string
        subfilter:
          $ref: "#/components/schemas/FilterV2"

    BooleanLogicFilterV2:
      type: object
      description: |
        Compose multiple filters (e.g. color=red AND capacity=3, NOT color=red). 
        The NOT operator only allows a single subfilter. The OR and AND operators require more than one subfilter.
      properties:
        operator:
          type: string
          enum: ["AND", "OR", "NOT"]
        subfilters:
          type: array
          items:
            $ref: "#/components/schemas/FilterV2"

    InstanceV2:
      type: object
      properties:
        attributes:
          description: A map of entity attribute names to their value for this instance. Only the attributes requested are populated.
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplayV2"
        hierarchyFields:
          description: Hierarchy field values for this instance. One set of values per hierarchy. Only the values requested are populated.
          type: array
          items:
            type: object
            properties:
              hierarchy:
                type: string
              isMember:
                type: boolean
              path:
                type: string
              numChildren:
                type: integer
              isRoot:
                type: boolean

    InstanceListV2:
      type: object
      description: List of instances
      properties:
        sql:
          type: string
        instances:
          type: array
          items:
            $ref: "#/components/schemas/InstanceV2"

    InstanceCountV2:
      type: object
      properties:
        count:
          type: integer
        attributes:
          description: A map of entity attribute names to their value for this group.
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplayV2"

    InstanceCountListV2:
      type: object
      description: List of instance counts
      properties:
        sql:
          type: string
        instanceCounts:
          type: array
          items:
            $ref: "#/components/schemas/InstanceCountV2"

    ErrorReportV2:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string
    #########################UNDERLAY CONFIG V2 [END]###################################

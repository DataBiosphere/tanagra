openapi: 3.0.3
info:
  title: Tanagra Service API
  description: github.com/DataBiosphere/tanagra
  version: 0.0.0

servers:
  - url: /

paths:
  '/status':
    get:
      security: []
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [Unauthenticated]
      responses:
        200:
          description: Service can process requests
        500:
          description: Service is broken

  '/underlays':
    get:
      parameters:
        - $ref: '#/components/parameters/PageSize'
        - $ref: '#/components/parameters/PageToken'
      # TODO authorization
      security: []
      summary: Lists the underlays.
      operationId: listUnderlays
      tags: [ Underlays ]
      responses:
        200:
          $ref: '#/components/responses/ListUnderlaysResponse'

  '/underlays/{underlayName}':
    parameters:
      - $ref: '#/components/parameters/Underlay'
    get:
      # TODO authorization
      security: []
      summary: Get info on an underlay.
      operationId: getUnderlay
      tags: [ Underlays ]
      responses:
        200:
          $ref: '#/components/responses/GetUnderlayResponse'

  '/underlays/{underlayName}/entities':
    parameters:
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageToken'
      - $ref: '#/components/parameters/Underlay'
    get:
      # TODO authorization
      security: []
      summary: Returns the entities in the underlay.
      operationId: listEntities
      tags: [Entities]
      responses:
        200:
          $ref: '#/components/responses/ListEntitiesResponse'

  '/underlays/{underlayName}/entities/{entities}':
    parameters:
      - $ref: '#/components/parameters/Underlay'
      - $ref: '#/components/parameters/Entity'
    get:
      # TODO authorization
      security: []
      summary: Get info on an entity in an underlay.
      operationId: getEntity
      tags: [Entities]
      responses:
        200:
          $ref: '#/components/responses/GetEntityResponse'

  # TODO implement "real" export endpoints
  '/underlays/{underlayName}/entities/{entityName}/filters:generateSqlQuery':
    parameters:
      - $ref: '#/components/parameters/Underlay'
      - $ref: '#/components/parameters/Entity'
    post:
      # TODO authorization
      security: []
      summary: Returns an SQL query for listing all of an Entity's primary keys.
      operationId: generateSqlQuery
      tags: [EntitiesFilters]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EntityFilter'
      responses:
        200:
          $ref: '#/components/responses/SqlQueryResponse'


  # TODO implement "real" export endpoints
  '/underlays/{underlay}/entities/{entity}/instances:generateSqlQuery':
    parameters:
      - $ref: '#/components/parameters/Underlay'
      - $ref: '#/components/parameters/Entity'
    post:
      # TODO authorization
      security: [ ]
      summary: Returns an SQL query for selecting a dataset of entity instances.
      operationId: generateDatasetSqlQuery
      tags: [EntityInstances]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateDatasetSqlQueryRequest'
      responses:
        200:
          $ref: '#/components/responses/SqlQueryResponse'

  '/underlays/{underlayName}/entities/{entities}/instances:search':
    parameters:
      - $ref: '#/components/parameters/Entity'
      - $ref: '#/components/parameters/PageSize'
      - $ref: '#/components/parameters/PageToken'
      - $ref: '#/components/parameters/Underlay'
    post:
      # TODO authorization
      security: []
      summary: Search for entity instances
      operationId: searchEntityInstances
      tags: [EntityInstances]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchEntityInstancesRequest'
      responses:
        200:
          $ref: '#/components/responses/SearchEntityInstancesResponse'

components:
  parameters:
    Underlay:
      name: underlayName
      in: path
      description: The name of the dataset underlay.
      required: true
      schema:
        type: string

    Entity:
      name: entityName
      in: path
      description: The name of an entity.
      required: true
      schema:
        type: string

    PageSize:
      name: pageSize
      in: query
      description: |
        The maximum number of results to return in this page. The server may return less.
        If 0 or unspecified, the server will decide the number of results.
      schema:
        type: integer
        minimum: 0
        default: 0

    PageToken:
      name: pageToken
      in: query
      description: An opaque pagination token to retrieve a specific page of results
      schema:
        type: string

  responses:
    GetEntityResponse:
      description: Response to get an entities.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Entity'

    GetUnderlayResponse:
      description: Response to get an underlay.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Underlay'

    ListEntitiesResponse:
      description: Response to list the entities.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListEntitiesResponse'

    ListUnderlaysResponse:
      description: Response to list the underlays.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ListUnderlaysResponse'

    SearchEntityInstancesResponse:
      description: Response to searching the entity instances.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SearchEntityInstancesResponse'

    SqlQueryResponse:
      description: A raw SQL query.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SqlQuery'

  schemas:
    Attribute:
      description: An attribute of an entity.
      type: object
      properties:
        name:
          description: The name of the attribute
          type: string
        dataType:
          $ref: '#/components/schemas/DataType'

    AttributeVariable:
      description: An attribute of a variable for an entity.
      type: object
      required: [name, variable]
      properties:
        name:
          description: The name of the attribute.
          type: string
        variable:
          description: The name of the variable.
          type: string

    AttributeValue:
      type: object
      description: |
        A possible value of an attribute. Exactly one field must be specified, or else the object
        must be null to represent NULL.
      nullable: true
      properties:
        int64Val:
          type: integer
          format: int64
        stringVal:
          type: string
        boolVal:
          type: boolean

    DataType:
      description: Enum of data types
      type: string
      enum: ['INT64', 'STRING', 'BOOL']

    Entity:
      type: object
      description: A relational logical entity supported by an Underlay.
      properties:
        name:
          # TODO consider a display name.
          description: The name of the entity.
          type: string
        attributes:
          description: The attributes that make up the entity.
          type: array
          items:
            $ref: '#/components/schemas/Attribute'

    EntityDataset:
      description: A selection of entity attributes and filters on them.
      type: object
      properties:
        entityVariable:
          description: The variable to use for the primary entity in the filter.
          type: string
        selectedAttributes:
          description: The name of the attributes of the primary entity to select for the dataset.
          type: array
          items:
            type: string
        filter:
          $ref: '#/components/schemas/Filter'

    EntityFilter:
      description: A filter to apply to the given entity.
      type: object
      properties:
        entityVariable:
          description: The variable to use for the top level entity in the filter.
          type: string
        filter:
          $ref: '#/components/schemas/Filter'

    ListEntitiesResponse:
      type: object
      description: A response for a list of Entities.
      properties:
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        nextPageToken:
          $ref: '#/components/schemas/NextPageToken'

    SqlQuery:
      type: object
      description: A raw SQL query.
      properties:
        # TODO consider deleting this object.
        # TODO consider parameterizing the query
        # TODO consider indicating the database this is generated for.
        query:
          type: string

    # Filters
    Filter:
      type: object
      description: |
        Base Filter type that contains one-of any Filter subtype.
        OpenApi inheritance and one-of code generation support are not great, so we roll our own.
      properties:
        arrayFilter:
          $ref: '#/components/schemas/ArrayFilter'
        binaryFilter:
          $ref: '#/components/schemas/BinaryFilter'
        relationshipFilter:
          $ref: '#/components/schemas/RelationshipFilter'
        # TODO allow aggregations in filters.

    ArrayFilter:
      type: object
      description: A filter function for operating on N operands.
      properties:
        operands:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        operator:
          $ref: '#/components/schemas/ArrayFilterOperator'

    ArrayFilterOperator:
      description: Enum for array function operators
      type: string
      enum: ['AND', 'OR']

    BinaryFilter:
      type: object
      description: |
        A binary filter function. Function ordered as `attributeVariable operator attributeValue`
      # TODO allow comparing two AttributeVariables
      properties:
        attributeVariable:
          $ref: '#/components/schemas/AttributeVariable'
        operator:
          $ref: '#/components/schemas/BinaryFilterOperator'
        attributeValue:
          $ref: '#/components/schemas/AttributeValue'

    BinaryFilterOperator:
      description: Enum for binary function operators
      type: string
      enum: ['EQUALS', 'LESS_THAN']

    RelationshipFilter:
      type: object
      description: |
        A filter that requires a relationship between an entity variable and another entity.
      properties:
        outerVariable:
          description: |
            A variable that already exists that must have the relationship described by this filter.
          type: string
        newVariable:
          description: The name of the new variable that must be related to the outerVariable.
          type: string
        newEntity:
          description: The name of the type of entity the newVariable is.
          type: string
        filter:
          $ref: '#/components/schemas/Filter'

    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    GenerateDatasetSqlQueryRequest:
      type: object
      properties:
        entityDataset:
          $ref: '#/components/schemas/EntityDataset'

    NextPageToken:
      type: string
      description: |
        The pagination token to retrieve the next page of results. If empty, there are no
        further results. Set as the PageToken in the next request.

    Underlay:
      type: object
      description: An underlay dataset used to power a Tanagra experience.
      properties:
        name:
          description: The name of the Underlay.
          type: string
        entityNames:
          description: The names of the entities in the Underlay.
          type: array
          items:
            type: string

    ListUnderlaysResponse:
      type: object
      description: A list of Underlays.
      properties:
        underlays:
          type: array
          items:
            $ref: '#/components/schemas/Underlay'
        nextPageToken:
          $ref: '#/components/schemas/NextPageToken'

    SearchEntityInstancesRequest:
      type: object
      description: A request for searching entity instances.
      properties:
        entityDataset:
          $ref: '#/components/schemas/EntityDataset'

    SearchEntityInstancesResponse:
      type: object
      description: A view of entity instances for a search request.
      properties:
        instances:
          type: array
          description: Repeated instances results of the search.
          items:
            $ref: '#/components/schemas/EntityInstanceStruct'
        nextPageToken:
          $ref: '#/components/schemas/NextPageToken'

    EntityInstanceStruct:
      type: object
      description: A map of an entity instance attribute names to their value for this instance.
      additionalProperties:
        type: object
        $ref: '#/components/schemas/AttributeValue'

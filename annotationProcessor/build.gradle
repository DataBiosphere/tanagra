import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'java'
    id 'pmd'
    id 'tanagra.java-conventions'

    // These plugins are needed to resolve versions of spring dependencies
    // transitively added by terra-common-lib
    id 'org.springframework.boot' version '3.2.5'
    id 'io.spring.dependency-management' version '1.1.5'
}

sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
    maven {
        url 'https://packages.confluent.io/maven/'
    }
    maven {
        name 'github'
        url 'https://maven.pkg.github.com/vanderbilt/tanagra-client-libraries'
        credentials {
            // Credentials required to access tanagra-client-libraries,
            // GITHUB_ACTOR: user running build task
            // GITHUB_TOKEN: user token or workflow token that grants access to libraries
            username = System.getenv('GITHUB_ACTOR')
            password = System.getenv('GITHUB_TOKEN')
        }
    }
}

dependencies {
    // added to address synk warnings
    constraints {
        implementation 'com.azure:azure-identity:1.12.2'
    }

    implementation "org.slf4j:slf4j-api:${gradle.vSlf4jApi}"

    implementation("bio.terra:terra-common-lib:${gradle.vTerraCommonLib}") {
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.opentelemetry'
        exclude group: 'io.opentelemetry.instrumentation'
    }

    implementation project(path: ':underlay')
    implementation project(path: ':service')

    // Static analysis
    pmd "net.sourceforge.pmd:pmd-ant:${gradle.vPmd}"
}

// e.g. ./gradlew annotationProcessor:run -Pgenerator=APPLICATION_CONFIG_DOCS
// Possible values for the "generator" property are the Main.Command enum values.
tasks.register('run', JavaExec) {
    mainClass = 'bio.terra.tanagra.annotation.Main'
    classpath = sourceSets.main.runtimeClasspath
    args "${rootDir}", project.hasProperty('generator') ? project.findProperty('generator') : 'undefined'
}

apply from: "${rootDir}/gradle/spotless-dependencies.gradle"

plugins {
    id 'tanagra.java-conventions'

    // These plugins are needed to resolve versions of spring dependencies
    // transitively added by terra-common-lib
    id 'io.spring.dependency-management' version "${vSpringDepMgt}"
    id 'org.springframework.boot' version "${vSpringBoot}"
}

sourceCompatibility = JavaVersion.VERSION_17

dependencies {
    implementation project(':underlay')
    implementation project(':service')

    implementation "org.slf4j:slf4j-api:${vSlf4jApi}"

    implementation("bio.terra:terra-common-lib:${vTerraCommonLib}") {
        // excluded since they are not needed, avoid vuln & mismatches
        exclude group: 'bio.terra', module: 'stairway'
        exclude group: 'bio.terra', module: 'stairway-azure'
        exclude group: 'bio.terra', module: 'stairway-gcp'
        exclude group: 'com.azure'
        exclude group: 'com.amazonaws'

        // excluded due to version mismatch
        exclude group: 'com.google.cloud.opentelemetry'
        exclude group: 'com.google.protobuf'
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.opentelemetry'
        exclude group: 'io.opentelemetry.instrumentation'
    }

    // Static analysis
    pmd "net.sourceforge.pmd:pmd-ant:${vPmd}"
}

// e.g. ./gradlew annotationProcessor:run -Pgenerator=APPLICATION_CONFIG_DOCS
// Possible values for the "generator" property are the Main.Command enum values.
tasks.register('run', JavaExec) {
    mainClass = 'bio.terra.tanagra.annotation.Main'
    classpath = sourceSets.main.runtimeClasspath
    args "${rootDir}", project.hasProperty('generator') ? project.findProperty('generator') : 'undefined'
}

apply from: "${rootDir}/gradle/spotless-dependencies.gradle"

// Messages mapping logical entities to physical SQL tables. This is meant to be
// generic across different SQL databases.
// Mappings define the translation layer between the source schema and Tanagra's
// generic schema

syntax = "proto3";

package bio.terra.tanagra.underlay;
option java_package = "bio.terra.tanagra.proto.underlay";
option java_multiple_files = true;

import "bio/terra/tanagra/underlay/entities.proto";
import "bio/terra/tanagra/underlay/tables.proto";

// How to map an entity.
message EntityMapping {
  // The name of the entity being mapped.
  string entity = 1;

  // The primary key for the entity. This is used to uniquely identify an entity
  // and the corresponding table is treated as the entity's primary table.
  ColumnId primary_key = 2;

  // An optional filter to apply to the table. This is used to map an entity to
  // a subset of a table's rows instead of the entire table.
  optional TableFilter table_filter = 3;
}

// How to map an attribute.
message AttributeMapping {
  // The attribute being mapped.
  AttributeId attribute = 1;

  // A mapping where an attribute refers directly to a column on the primary
  // table.
  message SimpleColumn {
    ColumnId column_id = 1;
  }

  // A mapping where an attribute refers to a normalized column in a lookup
  // table related to the primary table of the entity. There should be a single
  // row in the lookup table for each primary_table_key.
  // i.e. in pseudo-SQL
  // SELECT lookup.attribute FROM lookup_table
  // WHERE primary_table.lookup_key = lookup_table.key
  message LookupColumn {
    // The column on the primary table that references lookup_table_key.
    ColumnId primary_table_lookup_key = 1;
    // The column on the lookup table that is referenced by primary_table_key.
    ColumnId lookup_table_key = 2;
    // The column on the lookup table that is represented by the attribute.
    ColumnId lookup_column = 3;
  }

  // The mapping for this attribute.
  oneof mapping {
    SimpleColumn simple_column = 2;
    LookupColumn lookup_column = 3;
  }
}

// How to map a relationship between entities.
message RelationshipMapping {
  // The name of the relationship being mapped.
  string name = 1;

  // A mapping where a relationship is navigated by a foreign key in a table.
  message ForeignKey {
    // The column id of the primary key.
    ColumnId primary_key = 1;
    // The column id of the foreign key referencing the primary key.
    ColumnId foreign_key = 2;
  }

  // A mapping where a relationship is navigated by a separate intermediate table.
  // Each entity table has a column that foreign keys to a column in the intermediate table.
  message IntermediateTable {
    // The column in the entity1 table that FKs to the relationship table.
    ColumnId entity1_entity_table_key = 1;
    // The column in the relationship table that FKs to the entity1 table.
    ColumnId entity1_intermediate_table_key = 2;

    // The column in the entity2 table that FKs to the intermediate table.
    ColumnId entity2_entity_table_key = 3;
    // The column in the intermediate table that FKs to the entity2 table.
    ColumnId entity2_intermediate_table_key = 4;
  }

  // The mapping for this relationship.
  oneof mapping {
    ForeignKey foreign_key = 2;
    IntermediateTable intermediate_table = 3;
  }
}

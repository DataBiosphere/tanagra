// The physical tables that make up a data underlay. These define the schema of
// the source underlying dataset.

syntax = "proto3";

package bio.terra.tanagra.underlay;
option java_package = "bio.terra.tanagra.proto.underlay";
option java_multiple_files = true;

import "bio/terra/tanagra/underlay/shared.proto";

message Dataset {
  // The name of this dataset.
  string name = 1;

  message BigQueryDataset {
    // The id of the Google project containing the dataset.
    string project_id = 1;
    // The id of the BigQuery dataset.
    string dataset_id = 2;
  }
  oneof dataset {
    BigQueryDataset big_query_dataset = 2;
  }

  repeated Table tables = 3;
}

message Table {
  // The name of the table.
  string name = 1;
  // The columns that make up the table.
  repeated Column columns = 2;
}

// A description of a table's column.
message Column {
  optional string name = 1;
  optional DataType data_type = 2;
}

// An id to uniquely identify a column of a table within an underlay.
message ColumnId {
  // The name of the dataset.
  string dataset = 1;
  // The name of the table.
  string table = 2;
  // The name of the column.
  string column = 3;
}

// A filter specification to get a subset of the rows in a table.
message TableFilter {
  // One type of table filter.
  // TODO: add more filter types here (see entity search filters for ideas)
  oneof filter {
    // A composition of multiple sub-filters.
    ArrayColumnFilter array_column_filter = 1;

    // A condition on a particular column.
    BinaryColumnFilter binary_column_filter = 2;
  }
}

// A building block for a TableFilter that composes multiple sub-filters.
message ArrayColumnFilter {
  // The operator to use between the sub-filters.
  ArrayColumnFilterOperator operator = 1;

  // A list of array sub-filters to compose.
  repeated ArrayColumnFilter array_column_filters = 2;

  // A list of binary sub-filters to compose.
  repeated BinaryColumnFilter binary_column_filters = 3;
}

enum ArrayColumnFilterOperator {
  AND = 0;
  OR = 1;
}

// A building block for a TableFilter that defines a condition on a single column.
message BinaryColumnFilter {
  // Pointer to the column.
  ColumnId column = 1;

  BinaryColumnFilterOperator operator = 2;

  // Column value to filter on.
  oneof value {
    int64 int64_val = 3;
    string string_val = 4;
  }
}

enum BinaryColumnFilterOperator {
  EQUALS = 0;
  NOT_EQUALS = 1;
  LESS_THAN = 2;
  GREATER_THAN = 3;
}
// Messages for information about hierarchical attributes.

syntax = "proto3";

package bio.terra.tanagra.underlay;
option java_package = "bio.terra.tanagra.proto.underlay";
option java_multiple_files = true;

import "bio/terra/tanagra/underlay/entities.proto";
import "bio/terra/tanagra/underlay/tables.proto";

// All of the mappings
message Hierarchy {
  // The attribute that is a part of this hierarchy.
  AttributeId attribute = 1;

  DescendantsTable descendants_table = 2;

  ChildrenTable children_table = 3;

  // Note that the definition of the PathsTable causes Tanagra to add two
  // generated attributes to the entity. These attributes will be named
  // "t_path_xx" and "t_numChildren_xx" where xx=the name of the attribute
  // for this hierarchy (defined above in this message).
  PathsTable paths_table = 4;
}

// A table of ancestor attribute values to all descendant attribute values.
// There should be a row for each (ancestor, descendant) pair in the hierarchy.
message DescendantsTable {
  // The column of the ancestor value. This should have the same data type as
  // the attribute in the hierarchy.
  ColumnId ancestor = 1;
  // The column of the descendant value.
  ColumnId descendant = 2;
}

// A table of parent attribute values to all immediate children attribute values.
// There should be a row for each (parent, child) pair in the hierarchy.
message ChildrenTable {
  // The column of the parent value. This should have the same data type as
  // the attribute in the hierarchy.
  ColumnId parent = 1;
  // The column of the child value.
  ColumnId child = 2;

  // An optional additional filter on the table.
  optional TableFilter table_filter = 3;
}

// A table of node attribute values to all path and numChildren attribute values.
// There should be a row for each node in the hierarchy (node, path, numChildren).
message PathsTable {
  // The column of the node value. This should have the same data type as
  // the attribute in the hierarchy.
  ColumnId node = 1;
  // The column of the path.
  ColumnId path = 2;
  // The column of the number of children this node has in the hierarchy.
  ColumnId num_children = 3;
}

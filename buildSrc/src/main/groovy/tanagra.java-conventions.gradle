// This defines a Convention Plugin that implements the common logic to use
// for building all Java  projects in the tanagra project.
//
// For more info please see:
//
// https://docs.gradle.org/current/userguide/sharing_build_logic_between_subprojects.html
// https://docs.gradle.org/current/userguide/organizing_gradle_projects.html#sec:build_sources
//

plugins {
    id 'java'
    id 'idea'
    id 'pmd'
    id 'jacoco'
    id 'maven-publish'
    id 'java-test-fixtures'
    id 'io.spring.dependency-management'

    // Other tanagra plugin conventions.
    id 'tanagra.spotless-conventions'
    id 'tanagra.quality-conventions'
    id 'tanagra.test-conventions'
}

sourceCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
    maven {
        name 'github'
        url 'https://maven.pkg.github.com/vanderbilt/tanagra-client-libraries'
        credentials {
            // Credentials required to access tanagra-client-libraries,
            // GITHUB_ACTOR: user running build task
            // GITHUB_TOKEN: user token or workflow token that grants access to libraries
            username = System.getenv('GITHUB_ACTOR')
            password = System.getenv('GITHUB_TOKEN')
        }
    }
    google()
}

// See https://docs.gradle.org/current/userguide/dependency_locking.html
dependencyLocking {
    lockAllConfigurations()
}

dependencyManagement {
    dependencies {
        // GCP BOM includes 4.x protobuf versions which are not compatible with current beam libs
        dependency "com.google.protobuf:protobuf-java:${vGoogleProtobufProtoc}"
        dependency "com.google.protobuf:protobuf-java-util:${vGoogleProtobufProtoc}"

        // addresses security vulnerabilities
        dependency "ch.qos.logback:logback-classic:${vLogback}"
        dependency "ch.qos.logback:logback-core:${vLogback}"
        dependency "org.apache.tomcat.embed:tomcat-embed-core:${vApacheTomcat}"
        dependency "io.swagger.core.v3:swagger-annotations:${vSwaggerAnnotations}"
        dependency "io.swagger.codegen.v3:swagger-codegen-cli:${vSwaggerCodegen}"
        dependency "io.netty:netty-buffer:${vIoNetty}"
        dependency "io.netty:netty-common:${vIoNetty}"
        dependency "io.netty:netty-codec-http2:${vIoNetty}"
        dependency "io.netty:netty-codec-socks:${vIoNetty}"
        dependency "io.netty:netty-handler-proxy:${vIoNetty}"
        dependency "io.netty:netty-tcnative-boringssl-static:${vIoNettyNative}"
        dependency "io.netty:netty-tcnative-classes:${vIoNettyNative}"

        dependency 'org.apache.commons:commons-compress:1.26.2'
        dependency 'org.apache.avro:avro:1.11.4'
        dependency 'com.charleskorn.kaml:kaml:0.60.0'
        dependency 'org.jetbrains.kotlin:kotlin-stdlib:2.1.0'
    }
}

dependencies {
    // GCP BOM - See https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/The-Google-Cloud-Platform-Libraries-BOM
    implementation platform('com.google.cloud:libraries-bom:26.50.0')
}

// Javadoc
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17)) // Specify the Java version (e.g., 11)
    }
    // Builds Javadoc into the published package as part of the 'assemble' task.
    withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    allprojects {
        options.release.set(17)
    }
}

// Use the approach described in the link below to turn off console output
// for warning-level Javadoc errors. We don't require warning-level fixes
// to Javadoc and wish to suppress the noise.
// https://blog.joda.org/2014/02/turning-off-doclint-in-jdk-8-javadoc.html
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc).configureEach {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

package bio.terra.tanagra.app.configuration;

import bio.terra.tanagra.annotation.AnnotatedClass;
import bio.terra.tanagra.annotation.AnnotatedField;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Configuration;

@Configuration
@EnableConfigurationProperties
@ConfigurationProperties(prefix = "tanagra.auth")
@AnnotatedClass(
    name = "Authentication",
    markdown =
        "Configure the authentication model.\n\n"
            + "There are five separate flags that control which model is used: `tanagra.auth.disableChecks`, "
            + "`tanagra.auth.iapGkeJwt`, `tanagra.auth.iapAppEngineJwt`, `tanagra.auth.gcpAccessToken`, "
            + "`tanagra.auth.jwt`. In the future these will be combined into a single flag. "
            + "For now, **you must set all five flags and only one should be true**. ")
public class AuthenticationConfiguration {
  private static final Logger LOGGER = LoggerFactory.getLogger(AuthenticationConfiguration.class);

  @AnnotatedField(
      name = "tanagra.auth.disableChecks",
      markdown =
          "When true, authentication checks will be disabled. This is helpful during testing, especially "
              + "testing a locally deployed service. It should never be used for a production service.",
      environmentVariable = "TANAGRA_AUTH_DISABLE_CHECKS")
  private boolean disableChecks;

  @AnnotatedField(
      name = "tanagra.auth.iapGkeJwt",
      markdown =
          "When true, the service expects a JWT generated by Google IAP running in front of GKE. "
              + "When this flag is set, you must also define the [GKE backend service id](${tanagra.auth.gkeBackendServiceId}) "
              + "and the [GCP project id](${tanagra.auth.gcpProjectId}). "
              + "More details in the [GCP documentation](https://cloud.google.com/iap/docs/signed-headers-howto).",
      environmentVariable = "TANAGRA_AUTH_IAP_GKE_JWT")
  private boolean iapGkeJwt;

  @AnnotatedField(
      name = "tanagra.auth.iapAppEngineJwt",
      markdown =
          "When true, the service expects a JWT generated by Google IAP running in front of AppEngine. "
              + "When this flag is set, you must also define the [GCP project number](${tanagra.auth.gcpProjectNumber}) "
              + "and the [GCP project id](${tanagra.auth.gcpProjectId}). "
              + "More details in the [GCP documentation](https://cloud.google.com/iap/docs/signed-headers-howto).",
      environmentVariable = "TANAGRA_AUTH_IAP_APP_ENGINE_JWT")
  private boolean iapAppEngineJwt;

  @AnnotatedField(
      name = "tanagra.auth.gcpAccessToken",
      markdown =
          "When true, the service expects a Google OAuth access token. "
              + "The service calls Google's `https://www.googleapis.com/oauth2/v2/userinfo` endpoint to get the email address of the user from the token. "
              + "More details in the [GCP documentation](https://developers.google.com/identity/openid-connect/openid-connect#obtaininguserprofileinformation).",
      environmentVariable = "TANAGRA_AUTH_GCP_ACCESS_TOKEN")
  private boolean gcpAccessToken;

  @AnnotatedField(
      name = "tanagra.auth.jwt",
      markdown =
          "When true, the service expects a JWT. The service decodes the user information from the token payload. "
              + "When this flag is set, optionally verify the token by setting [Issuer](#tanagraauthjwtissuer), "
              + "[Audience](#tanagraauthjwtaudience), [Public key file](#tanagraauthjwtpublicKeyFile). "
              + "[Algorithm](#tanagraauthjwtalgorithm) defaults to RSA256. ",
      environmentVariable = "TANAGRA_AUTH_JWT")
  private boolean jwt;

  @AnnotatedField(
      name = "tanagra.auth.gcpProjectNumber",
      markdown =
          "The GCP project number, which is different from the project id. "
              + "You can find this in the Cloud Console dashboard. More details in the "
              + "[GCP documentation](https://cloud.google.com/resource-manager/docs/creating-managing-projects) "
              + "and [IAP documentation](https://cloud.google.com/iap/docs/signed-headers-howto#verifying_the_jwt_payload). "
              + "Required when using the [IAP JWT AppEngine](${tanagra.auth.iapAppEngineJwt}) model.",
      optional = true,
      exampleValue = "0123456789",
      environmentVariable = "TANAGRA_AUTH_GCP_PROJECT_NUMBER")
  private String gcpProjectNumber;

  @AnnotatedField(
      name = "tanagra.auth.gcpProjectId",
      markdown =
          "The GCP project id, which is different from the project number. "
              + "You can find this in the Cloud Console dashboard. More details in the "
              + "[GCP documentation](https://cloud.google.com/resource-manager/docs/creating-managing-projects). "
              + "Required when using the [IAP JWT GKE](${tanagra.auth.iapGkeJwt}) or [IAP JWT AppEngine](${tanagra.auth.iapAppEngineJwt}) model.",
      optional = true,
      exampleValue = "tanagra-dev",
      environmentVariable = "TANAGRA_AUTH_GCP_PROJECT_ID")
  private String gcpProjectId;

  @AnnotatedField(
      name = "tanagra.auth.gkeBackendServiceId",
      markdown =
          "The GKE backend service id. "
              + "You can find this in the Cloud Console. More details in the "
              + "[IAP documentation](https://cloud.google.com/iap/docs/signed-headers-howto#verifying_the_jwt_payload). "
              + "Required when using the [IAP JWT GKE](${tanagra.auth.iapGkeJwt}) model.",
      optional = true,
      exampleValue = "0123456789",
      environmentVariable = "TANAGRA_AUTH_GKE_BACKEND_SERVICE_ID")
  private String gkeBackendServiceId;

  @AnnotatedField(
      name = "tanagra.auth.jwt.issuer",
      markdown = "The issuer of JWT used for its verification. ",
      environmentVariable = "TANAGRA_AUTH_JWT_ISSUER")
  private String jwtIssuer;

  @AnnotatedField(
      name = "tanagra.auth.jwt.audience",
      markdown = "The audience of JWT used for its verification. ",
      environmentVariable = "TANAGRA_AUTH_JWT_AUDIENCE")
  private String jwtAudience;

  @AnnotatedField(
      name = "tanagra.auth.jwt.publicKeyFile",
      markdown =
          "Name of the PEM public key file in the 'resources/keys' directory used to verify the JWT. ",
      environmentVariable = "TANAGRA_AUTH_JWT_PUBLIC_KEY_FILE")
  private String jwtPublicKeyFile;

  @AnnotatedField(
      name = "tanagra.auth.jwt.algorithm",
      markdown = "The algorithm used to verify the JWT. Defaults to RSA256 ",
      environmentVariable = "TANAGRA_AUTH_JWT_ALGORITHM")
  private String jwtAlgorithm = "RSA";

  public boolean isDisableChecks() {
    return disableChecks;
  }

  public boolean isIapGkeJwt() {
    return iapGkeJwt;
  }

  public boolean isIapAppEngineJwt() {
    return iapAppEngineJwt;
  }

  public boolean isGcpAccessToken() {
    return gcpAccessToken;
  }

  public boolean isJwt() {
    return jwt;
  }

  public long getGcpProjectNumber() {
    try {
      return gcpProjectNumber == null ? Long.MIN_VALUE : Long.parseLong(gcpProjectNumber);
    } catch (NumberFormatException nfEx) {
      // Don't throw an exception here, which would prevent the service from starting up.
      LOGGER.warn("Invalid GCP project number: {}", gcpProjectNumber);
      return Long.MIN_VALUE;
    }
  }

  public String getGcpProjectId() {
    return gcpProjectId;
  }

  public long getGkeBackendServiceId() {
    try {
      return gkeBackendServiceId == null ? Long.MIN_VALUE : Long.parseLong(gkeBackendServiceId);
    } catch (NumberFormatException nfEx) {
      // Don't throw an exception here, which would prevent the service from starting up.
      LOGGER.warn("Invalid GCP project number: {}", gkeBackendServiceId);
      return Long.MIN_VALUE;
    }
  }

  public String getJwtIssuer() {
    return jwtIssuer;
  }

  public String getJwtAudience() {
    return jwtAudience;
  }

  public String getJwtPublicKeyFile() {
    return jwtPublicKeyFile;
  }

  public String getJwtAlgorithm() {
    return jwtAlgorithm;
  }

  public void setDisableChecks(boolean disableChecks) {
    this.disableChecks = disableChecks;
  }

  public void setIapGkeJwt(boolean iapGkeJwt) {
    this.iapGkeJwt = iapGkeJwt;
  }

  public void setIapAppEngineJwt(boolean iapAppEngineJwt) {
    this.iapAppEngineJwt = iapAppEngineJwt;
  }

  public void setGcpAccessToken(boolean gcpAccessToken) {
    this.gcpAccessToken = gcpAccessToken;
  }

  public void setJwt(boolean jwt) {
    this.jwt = jwt;
  }

  public void setGcpProjectNumber(String gcpProjectNumber) {
    this.gcpProjectNumber = gcpProjectNumber;
  }

  public void setGcpProjectId(String gcpProjectId) {
    this.gcpProjectId = gcpProjectId;
  }

  public void setGkeBackendServiceId(String gkeBackendServiceId) {
    this.gkeBackendServiceId = gkeBackendServiceId;
  }

  public void setJwtIssuer(String jwtIssuer) {
    this.jwtIssuer = jwtIssuer;
  }

  public void setJwtPublicKeyFile(String jwtPublicKeyFile) {
    this.jwtPublicKeyFile = jwtPublicKeyFile;
  }

  public void setJwtAlgorithm(String jwtAlgorithm) {
    this.jwtAlgorithm = jwtAlgorithm;
  }

  public void log() {
    LOGGER.info("Authentication: disable-checks: {}", isDisableChecks());
    LOGGER.info("Authentication: iap-gke-jwt: {}", isIapGkeJwt());
    LOGGER.info("Authentication: iap-appengine-jwt: {}", isIapAppEngineJwt());
    LOGGER.info("Authentication: gcp-access-token: {}", isGcpAccessToken());
    LOGGER.info("Authentication: jwt: {}", isJwt());
    LOGGER.info("Authentication: gcp-project-number: {}", getGcpProjectNumber());
    LOGGER.info("Authentication: gcp-project-id: {}", getGcpProjectId());
    LOGGER.info("Authentication: gke-backend-service-id: {}", getGkeBackendServiceId());
    LOGGER.info("Authentication: jwt-issuer: {}", getJwtIssuer());
    LOGGER.info("Authentication: jwt-audience: {}", getJwtAudience());
    LOGGER.info("Authentication: jwt-public-key-file: {}", getJwtPublicKeyFile());
    LOGGER.info("Authentication: jwt-algorithm: {}", getJwtAlgorithm());
  }
}

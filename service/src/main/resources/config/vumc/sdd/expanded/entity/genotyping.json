{
  "name" : "genotyping",
  "idAttribute" : "id",
  "attributes" : [ {
    "type" : "SIMPLE",
    "name" : "name",
    "dataType" : "STRING",
    "displayHint" : {
      "type" : "ENUM",
      "enumVals" : [ {
        "enumVal" : {
          "value" : {
            "stringVal" : "ADME"
          },
          "display" : "ADME"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Affymetrix Axiom Biobank Array"
          },
          "display" : "Affymetrix Axiom Biobank Array"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Affymetrix Axiom Exome319 arrays"
          },
          "display" : "Affymetrix Axiom Exome319 arrays"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Affymetrix World Array"
          },
          "display" : "Affymetrix World Array"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Custom Illumina Infinium HumanExome BeadChip"
          },
          "display" : "Custom Illumina Infinium HumanExome BeadChip"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "DMET"
          },
          "display" : "DMET"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "GWAS Platforms"
          },
          "display" : "GWAS Platforms"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "HLA Typing"
          },
          "display" : "HLA Typing"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "HumanCoreExome Illumina"
          },
          "display" : "HumanCoreExome Illumina"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "HumanOmni25M-8"
          },
          "display" : "HumanOmni25M-8"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "HumanOmni5-Quad"
          },
          "display" : "HumanOmni5-Quad"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "HumanOmniExpress-24v1-0-B"
          },
          "display" : "HumanOmniExpress-24v1-0-B"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "HumanOmniExpressExome-8v1-2-B"
          },
          "display" : "HumanOmniExpressExome-8v1-2-B"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "HumanOmniExpressExome-8v1-A"
          },
          "display" : "HumanOmniExpressExome-8v1-A"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina 1M"
          },
          "display" : "Illumina 1M"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina 5M"
          },
          "display" : "Illumina 5M"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina 660W"
          },
          "display" : "Illumina 660W"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina GoldenGate"
          },
          "display" : "Illumina GoldenGate"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina Infinium HumanExome BeadChip"
          },
          "display" : "Illumina Infinium HumanExome BeadChip"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina MEGA-ex Array"
          },
          "display" : "Illumina MEGA-ex Array"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina MetaboChip"
          },
          "display" : "Illumina MetaboChip"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina OMNI-Quad"
          },
          "display" : "Illumina OMNI-Quad"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina OmniExpress 12v"
          },
          "display" : "Illumina OmniExpress 12v"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina OncoArray"
          },
          "display" : "Illumina OncoArray"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Illumina Whole Exome Sequencing"
          },
          "display" : "Illumina Whole Exome Sequencing"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Immunochip"
          },
          "display" : "Immunochip"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "NGS 101 Panel Assay"
          },
          "display" : "NGS 101 Panel Assay"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Next Generation Sequencing"
          },
          "display" : "Next Generation Sequencing"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Non-GWAS and Targeted Genotyping Platforms"
          },
          "display" : "Non-GWAS and Targeted Genotyping Platforms"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "PREDICT Expansion"
          },
          "display" : "PREDICT Expansion"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Precision Medicine Diversity Array"
          },
          "display" : "Precision Medicine Diversity Array"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Sanger Sequencing"
          },
          "display" : "Sanger Sequencing"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Sequencing Platforms"
          },
          "display" : "Sequencing Platforms"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "TERT sequencing"
          },
          "display" : "TERT sequencing"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "Telomere Length Assay"
          },
          "display" : "Telomere Length Assay"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "TruSight Myeloid NGS"
          },
          "display" : "TruSight Myeloid NGS"
        },
        "count" : 1
      }, {
        "enumVal" : {
          "value" : {
            "stringVal" : "human hemoglobin beta (HBB) gene sequencing"
          },
          "display" : "human hemoglobin beta (HBB) gene sequencing"
        },
        "count" : 1
      } ]
    }
  }, {
    "type" : "SIMPLE",
    "name" : "id",
    "dataType" : "INT64"
  } ],
  "sourceDataMapping" : {
    "dataPointer" : "omop_dataset",
    "tablePointer" : {
      "rawSql" : "/*  platform_id column has type NUMERIC. This causes index column to be FLOAT.  Currently indexing doesn't handle floats properly, so change column to INTEGER. */ SELECT CAST(platform_id as INT64) AS platform_id, assay_name as assay_name FROM `victr-tanagra-test.sd_static.platform` UNION ALL /*  Add some rows to get hierarchy to work. Parent ids are defined in  genotype_criteria, criteria_meta_seq column. criteria_meta_seq is not in the  same \"ID space\" as platform_id. Tanagra requres parent id to be in same \"ID  space\" as platform_id. So create artificial platform_ids for parents.  */ (SELECT 101 AS platform_id, 'GWAS Platforms' AS assay_name UNION ALL  SELECT 102, 'Non-GWAS and Targeted Genotyping Platforms' UNION ALL  SELECT 103, 'Sequencing Platforms') "
    },
    "attributeMappings" : {
      "name" : {
        "value" : {
          "column" : "assay_name"
        }
      },
      "id" : {
        "value" : {
          "column" : "platform_id"
        }
      }
    },
    "textSearchMapping" : {
      "attributes" : [ "id" ]
    },
    "hierarchyMappings" : {
      "standard" : {
        "childParent" : {
          "tablePointer" : {
            "rawSql" : "SELECT /* Use parent ids defined in platform.sql */         parent_seq + 100 AS parent,         CAST(platform_id as INT64) AS child FROM `victr-tanagra-test.sd_static.genotype_criteria` g, `victr-tanagra-test.sd_static.platform` p WHERE g.name = p.assay_name "
          },
          "fieldPointers" : {
            "parent" : {
              "column" : "parent"
            },
            "child" : {
              "column" : "child"
            }
          }
        },
        "rootNodesFilter" : {
          "tablePointer" : {
            "rawSql" : "/* Match the platform ids in platform.sql */ SELECT 101 AS id UNION ALL SELECT 102 UNION ALL SELECT 103 "
          },
          "fieldPointers" : {
            "id" : {
              "column" : "id"
            }
          }
        },
        "maxHierarchyDepth": 1
      }
    }
  },
  "indexDataMapping" : {
    "dataPointer" : "index_dataset",
    "tablePointer" : {
      "table" : "genotyping"
    },
    "attributeMappings" : {
      "name" : {
        "value" : {
          "column" : "name"
        }
      },
      "id" : {
        "value" : {
          "column" : "id"
        }
      }
    },
    "textSearchMapping" : {
      "searchString" : {
        "column" : "text"
      }
    },
    "hierarchyMappings" : {
      "standard" : {
        "childParent" : {
          "tablePointer" : {
            "table" : "genotyping_standard_childParent"
          },
          "fieldPointers" : {
            "parent" : {
              "column" : "parent"
            },
            "child" : {
              "column" : "child"
            }
          }
        },
        "ancestorDescendant" : {
          "tablePointer" : {
            "table" : "genotyping_standard_ancestorDescendant"
          },
          "fieldPointers" : {
            "ancestor" : {
              "column" : "ancestor"
            },
            "descendant" : {
              "column" : "descendant"
            }
          }
        },
        "pathNumChildren" : {
          "tablePointer" : {
            "table" : "genotyping"
          },
          "fieldPointers" : {
            "path" : {
              "column" : "t_standard_path"
            },
            "num_children" : {
              "column" : "t_standard_num_children"
            },
            "id" : {
              "column" : "id"
            }
          }
        },
        "maxHierarchyDepth": 1
      }
    }
  }
}

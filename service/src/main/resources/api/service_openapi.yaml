openapi: 3.0.3
info:
  title: Tanagra Service API
  description: github.com/DataBiosphere/tanagra
  version: 0.0.0

servers:
  - url: /

security:
  - bearerAuth: []
  - authorization: [openid, email, profile]

paths:
  "/status":
    get:
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [Unauthenticated]
      responses:
        200:
          description: Service can process requests
        500:
          description: Service is broken

  "/v2/version":
    get:
      summary: Returns the deployed version of the service
      operationId: serviceVersion
      tags: [Unauthenticated]
      responses:
        200:
          description: Version properties
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemVersionV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/profile":
    get:
      tags: [UsersV2]
      description: Returns the current user's profile information
      operationId: getMe
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfileV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays":
    get:
      summary: List the underlays
      operationId: listUnderlays
      tags: [UnderlaysV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnderlayListV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
    get:
      summary: Get an underlay
      operationId: getUnderlay
      tags: [UnderlaysV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnderlayV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
    get:
      summary: List the entities in an underlay
      operationId: listEntities
      tags: [EntitiesV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityListV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
      - $ref: "#/components/parameters/EntityNameV2"
    get:
      summary: Get an entity
      operationId: getEntity
      tags: [EntitiesV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}/instances":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
      - $ref: "#/components/parameters/EntityNameV2"
    post:
      summary: List entity instances
      operationId: listInstances
      tags: [InstancesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QueryV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceListResultV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}/counts":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
      - $ref: "#/components/parameters/EntityNameV2"
    post:
      summary: Count entity instances
      operationId: countInstances
      tags: [InstancesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountQueryV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceCountListV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}/hints":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
      - $ref: "#/components/parameters/EntityNameV2"
    post:
      summary: Query entity display hints
      operationId: queryHints
      tags: [HintsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HintQueryV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisplayHintListV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies":
    get:
      parameters:
        - $ref: "#/components/parameters/StudyFilterDisplayNameV2"
        - $ref: "#/components/parameters/StudyFilterDescriptionV2"
        - $ref: "#/components/parameters/StudyFilterCreatedByV2"
        - $ref: "#/components/parameters/StudyFilterIncludeDeleted"
        - $ref: "#/components/parameters/StudyFilterPropertiesV2"
        - $ref: "#/components/parameters/OffsetV2"
        - $ref: "#/components/parameters/LimitV2"
      summary: List all studies a user can read
      operationId: listStudies
      tags: [StudiesV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyListV2"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new study
      operationId: createStudy
      tags: [StudiesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudyCreateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
    get:
      summary: Get an existing study
      operationId: getStudy
      tags: [StudiesV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing study
      operationId: updateStudy
      tags: [StudiesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudyUpdateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a study
      operationId: deleteStudy
      tags: [StudiesV2]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/properties":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
    post:
      summary: |
        Update the properties in a study. Only properties with keys in request 
        are updated. Properties with keys not in request are not updated.
      operationId: updateStudyProperties
      tags: [StudiesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertiesV2"
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: |
        Delete properties in a study. Only properties with keys in
        request are deleted. Properties with keys not in request are not
        deleted.
      operationId: deleteStudyProperties
      tags: [StudiesV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyKeysV2"
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
    get:
      parameters:
        - $ref: "#/components/parameters/OffsetV2"
        - $ref: "#/components/parameters/LimitV2"
      summary: List all cohorts in a study
      operationId: listCohorts
      tags: [CohortsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CohortListV2"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new cohort
      operationId: createCohort
      tags: [CohortsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CohortCreateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CohortV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
      - $ref: "#/components/parameters/CohortRevisionIdV2"
    get:
      summary: Get an existing cohort
      operationId: getCohort
      tags: [CohortsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CohortV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing cohort
      operationId: updateCohort
      tags: [CohortsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CohortUpdateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CohortV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a cohort
      operationId: deleteCohort
      tags: [CohortsV2]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
    get:
      parameters:
        - $ref: "#/components/parameters/OffsetV2"
        - $ref: "#/components/parameters/LimitV2"
      summary: List all reviews for a cohort
      operationId: listReviews
      tags: [ReviewsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewListV2"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new review
      operationId: createReview
      tags: [ReviewsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCreateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews/{reviewId}":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
      - $ref: "#/components/parameters/ReviewIdV2"
    get:
      summary: Get an existing review
      operationId: getReview
      tags: [ReviewsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing review
      operationId: updateReview
      tags: [ReviewsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewUpdateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a review
      operationId: deleteReview
      tags: [ReviewsV2]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews/{reviewId}/instances":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
      - $ref: "#/components/parameters/ReviewIdV2"
    post:
      summary: List primary entity instances in a review and any associated annotation values
      operationId: listReviewInstancesAndAnnotations
      tags: [ReviewsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewQueryV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewInstanceListResultV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews/{reviewId}/counts":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
      - $ref: "#/components/parameters/ReviewIdV2"
    post:
      summary: Count primary entity instances in a review
      operationId: countReviewInstances
      tags: [ReviewsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCountQueryV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceCountListV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/annotations":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
    get:
      parameters:
        - $ref: "#/components/parameters/OffsetV2"
        - $ref: "#/components/parameters/LimitV2"
      summary: List all annotation keys for a cohort
      operationId: listAnnotationKeys
      tags: [AnnotationsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationListV2"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new annotation key
      operationId: createAnnotationKey
      tags: [AnnotationsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationCreateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/annotations/{annotationId}":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
      - $ref: "#/components/parameters/AnnotationIdV2"
    get:
      summary: Get an existing annotation key
      operationId: getAnnotationKey
      tags: [AnnotationsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing annotation key
      operationId: updateAnnotationKey
      tags: [AnnotationsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationUpdateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an annotation key
      operationId: deleteAnnotationKey
      tags: [AnnotationsV2]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/annotations/{annotationId}/reviews/{reviewId}/values/{instanceId}":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/CohortIdV2"
      - $ref: "#/components/parameters/AnnotationIdV2"
      - $ref: "#/components/parameters/ReviewIdV2"
      - $ref: "#/components/parameters/PrimaryEntityInstanceIdV2"
    post:
      summary: Create or update an annotation value
      operationId: updateAnnotationValue
      tags: [AnnotationsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LiteralV2"
      responses:
        200:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an annotation value
      operationId: deleteAnnotationValues
      tags: [AnnotationsV2]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/conceptSets":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
    get:
      parameters:
        - $ref: "#/components/parameters/OffsetV2"
        - $ref: "#/components/parameters/LimitV2"
      summary: List all concept sets in a study
      operationId: listConceptSets
      tags: [ConceptSetsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSetListV2"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new concept set
      operationId: createConceptSet
      tags: [ConceptSetsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptSetCreateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSetV2"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/conceptSets/{conceptSetId}":
    parameters:
      - $ref: "#/components/parameters/StudyIdV2"
      - $ref: "#/components/parameters/ConceptSetIdV2"
    get:
      summary: Get an existing concept set
      operationId: getConceptSet
      tags: [ConceptSetsV2]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSetV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing concept set
      operationId: updateConceptSet
      tags: [ConceptSetsV2]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptSetUpdateInfoV2"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSetV2"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a concept set
      operationId: deleteConceptSet
      tags: [ConceptSetsV2]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/exportModels":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
    get:
      summary: List the available export models
      operationId: listExportModels
      tags: [Export]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportModelList"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/export":
    parameters:
      - $ref: "#/components/parameters/UnderlayNameV2"
    post:
      summary: Export entity instances and review annotations
      operationId: exportInstancesAndAnnotations
      tags: [Export]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportResult"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/activityLogEntries":
    parameters:
      - $ref: "#/components/parameters/ActivityLogFilterUserEmail"
      - $ref: "#/components/parameters/ActivityLogFilterExactMatch"
      - $ref: "#/components/parameters/ActivityLogFilterResourceType"
      - $ref: "#/components/parameters/ActivityLogFilterActivityType"
      - $ref: "#/components/parameters/OffsetV2"
      - $ref: "#/components/parameters/LimitV2"
    get:
      summary: List the activity log entries
      operationId: listActivityLogEntries
      tags: [ActivityLog]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLogEntryList"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/activityLogEntries/{activityLogEntryId}":
    parameters:
      - $ref: "#/components/parameters/ActivityLogEntryId"
    get:
      summary: Get an activity log entry
      operationId: getActivityLogEntry
      tags: [ActivityLog]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLogEntry"
        500:
          $ref: "#/components/responses/ServerError"

  /v2/vumc-admin-service-test:
    get:
      tags: [Test]
      description: Temporary endpoint to test service-to-service communication with the VUMC admin service.
      operationId: vumcAdminServiceTest
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VumcAdminServiceTest"
        401:
          description: Unauthorized
        500:
          $ref: "#/components/responses/ServerError"

components:
  parameters:
    UnderlayNameV2:
      name: underlayName
      in: path
      description: Name of the underlay
      required: true
      schema:
        type: string

    EntityNameV2:
      name: entityName
      in: path
      description: Name of the entity
      required: true
      schema:
        type: string

    StudyIdV2:
      name: studyId
      in: path
      description: ID of the study
      required: true
      schema:
        type: string

    CohortIdV2:
      name: cohortId
      in: path
      description: ID of the cohort
      required: true
      schema:
        type: string

    CohortRevisionIdV2:
      name: cohortRevisionId
      in: query
      description: ID of the cohort revision
      required: false
      schema:
        type: string

    ConceptSetIdV2:
      name: conceptSetId
      in: path
      description: ID of the concept set
      required: true
      schema:
        type: string

    ReviewIdV2:
      name: reviewId
      in: path
      description: ID of the review
      required: true
      schema:
        type: string

    AnnotationIdV2:
      name: annotationId
      in: path
      description: ID of the annotation
      required: true
      schema:
        type: string

    PrimaryEntityInstanceIdV2:
      name: instanceId
      in: path
      description: ID of the primary entity instance that the annotation value is associated with
      required: true
      schema:
        type: string

    OffsetV2:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0

    LimitV2:
      name: limit
      in: query
      description: The maximum number of items to return. Default 15
      required: false
      schema:
        type: integer
        minimum: 1
        default: 15

    StudyFilterDisplayNameV2:
      name: displayName
      in: query
      description: Text search on the study display name
      required: false
      schema:
        type: string

    StudyFilterDescriptionV2:
      name: description
      in: query
      description: Text search on the study description
      required: false
      schema:
        type: string

    StudyFilterCreatedByV2:
      name: createdBy
      in: query
      description: Text search on the study created by email
      required: false
      schema:
        type: string

    StudyFilterIncludeDeleted:
      name: includeDeleted
      in: query
      description: True to include studies that have been deleted
      required: false
      schema:
        type: boolean

    StudyFilterPropertiesV2:
      name: properties
      in: query
      description: Text search on the study metadata properties. The list must alternate key1, value1, key2, value2.
      required: false
      schema:
        type: array
        items:
          type: string

    ActivityLogFilterUserEmail:
      name: userEmail
      in: query
      description: Text search on the activity log entry user email
      required: false
      schema:
        type: string

    ActivityLogFilterExactMatch:
      name: exactMatch
      in: query
      description: True if the user email filter should check for an exact match
      required: false
      schema:
        type: boolean
        default: false

    ActivityLogFilterResourceType:
      name: resourceType
      in: query
      description: Filter on the activity log entry resource type
      required: false
      schema:
        $ref: "#/components/schemas/ResourceType"

    ActivityLogFilterActivityType:
      name: activityType
      in: query
      description: Filter on the activity log entry activity type
      required: false
      schema:
        $ref: "#/components/schemas/ActivityType"

    ActivityLogEntryId:
      name: activityLogEntryId
      in: path
      description: ID of the activity log entry
      required: true
      schema:
        type: string

  responses:
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReportV2"

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReportV2"

  schemas:
    UserData:
      type: object
      description: The root container for user generated data.
      properties:
        version:
          type: integer
          description: The version of UserData to support forward and backward compatibility.
        cohorts:
          type: array
          description: User generated cohorts.
          items:
            $ref: "#/components/schemas/Cohort"
        conceptSets:
          type: array
          description: User generated concept sets.
          items:
            $ref: "#/components/schemas/ConceptSet"
      required:
        - version
        - cohorts
        - conceptSets

    Cohort:
      type: object
      description: A user generated cohort.
      properties:
        id:
          type: string
          description: The unique id of this cohort.
        name:
          type: string
          description: The name of this cohort.
        underlayName:
          type: string
          description: The underlay this cohort is based on.
        lastModified:
          description: Timestamp of when the cohort was last modified
          type: string
          format: date-time
        groupSections:
          type: array
          description: The group sections that make up this cohort.
          items:
            $ref: "#/components/schemas/GroupSection"
      required:
        - id
        - name
        - underlayName
        - lastModified
        - groupSections

    GroupSection:
      type: object
      description: A group section of criteria (UI block).
      properties:
        id:
          type: string
          description: The unique id of this group.
        name:
          type: string
          description: The name of this group if customized.
        filter:
          $ref: "#/components/schemas/GroupSectionFilter"
        groups:
          type: array
          description: The groups that make of this section.
          items:
            $ref: "#/components/schemas/Group"
      required:
        - id
        - kind
        - filter
        - underlayName
        - groups

    Group:
      type: object
      description: A group of criteria (criteria + mods).
      properties:
        id:
          type: string
          description: The unique id of this group.
        entity:
          description: Entity referenced by the criteria
          type: string
        criteria:
          type: array
          description: The criteria that make of this group.
          items:
            $ref: "#/components/schemas/Criteria"
        groupByCount:
          $ref: "#/components/schemas/GroupByCount"
      required:
        - id
        - entity
        - criteria

    ComparisonOperator:
      type: string
      enum: ["EQUAL", "LESS_THAN_EQUAL", "GREATER_THAN_EQUAL", "BETWEEN"]

    GroupByCount:
      type: object
      description: A modifier to count rows grouped by date
      properties:
        attribute:
          description: Attribute to group by
          type: string
        operator:
          description: Operator to use for the comparison
          $ref: "#/components/schemas/ComparisonOperator"
        value:
          description: Value to compare against
          type: integer
      required:
        - attribute
        - operator
        - value

    GroupSectionFilter:
      type: object
      description: |
        A filter for a list of criteria that indicates how to combine the states
        of the individual criteria.
      properties:
        kind:
          type: string
          description: The kind of this group.
          enum: ["ANY", "ALL"]
        excluded:
          type: boolean
          description: This group should be excluded instead of included.
      required:
        - kind
        - excluded

    ConceptSet:
      type: object
      description: A user generated concept set.
      properties:
        id:
          type: string
          description: The unique id of this concept set.
        underlayName:
          type: string
          description: The underlay this concept set is based on.
        criteria:
          $ref: "#/components/schemas/Criteria"
      required:
        - id
        - underlayName
        - criteria

    Criteria:
      type: object
      description: A single criteria in a cohort or concept set.
      properties:
        id:
          type: string
          description: The unique id of this criteria.
        type:
          type: string
          description: The plugin type used by this criteria.
        data:
          type: object
          description: The plugin specific data that defines this criteria.
        config:
          type: object
          description: The UI configuration used by this criteria.
          $ref: "#/components/schemas/CriteriaConfig"
      required:
        - id
        - type
        - data
        - config

    CriteriaConfig:
      type: object
      description: The configuration for an instance of a cohort plugin. Fields related to individual plugins may also be present.
      properties:
        type:
          type: string
          description: The plugin type to use for this criteria.
        id:
          type: string
          description: The unique id of this criteria config.
        title:
          type: string
          description: The display title for this criteria.
      required:
        - type
        - id
        - title
      additionalProperties: true

    SystemVersionV2:
      type: object
      required: [gitTag, gitHash, github, build]
      properties:
        gitTag:
          type: string
          description: Git tag of currently deployed app.
        gitHash:
          type: string
          description: Git hash of currently deployed app.
        github:
          type: string
          description: Github link to currently deployed commit.
        build:
          type: string
          description: Version of the currently deployed app declared in build.gradle. Client and server versions are linked.

    UserProfileV2:
      type: object
      description: User profile
      properties:
        email:
          type: string
        subjectId:
          type: string
      required:
        - email
        - subjectId

    UnderlayV2:
      type: object
      description: Underlay
      properties:
        name:
          description: Name
          type: string
        displayName:
          description: Display name
          type: string
        primaryEntity:
          description: Primary entity name
          type: string
        uiConfiguration:
          description: UI configuration
          type: string
      required:
        - name
        - primaryEntity

    UnderlayListV2:
      type: object
      description: List of underlays
      properties:
        underlays:
          type: array
          items:
            $ref: "#/components/schemas/UnderlayV2"

    EntityV2:
      type: object
      description: Entity
      properties:
        name:
          description: Name
          type: string
        idAttribute:
          description: ID attribute name
          type: string
        attributes:
          description: List of attributes
          type: array
          items:
            $ref: "#/components/schemas/AttributeV2"
      required:
        - name
        - idAttribute

    EntityListV2:
      type: object
      description: List of entities
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/EntityV2"

    AttributeV2:
      type: object
      description: Entity attribute
      properties:
        name:
          description: Name
          type: string
        type:
          description: Attribute type
          type: string
          enum: ["SIMPLE", "KEY_AND_DISPLAY"]
        dataType:
          $ref: "#/components/schemas/DataTypeV2"

    ValueDisplayV2:
      type: object
      description: Attribute value and optional display string
      properties:
        value:
          description: Literal value
          $ref: "#/components/schemas/LiteralV2"
        display:
          type: string
          description: Optional display string
          nullable: true

    LiteralV2:
      type: object
      description: Union of references to each value type. Exactly one will be populated based on the dataType.
      nullable: true
      properties:
        dataType:
          $ref: "#/components/schemas/DataTypeV2"
        valueUnion:
          type: object
          properties:
            boolVal:
              type: boolean
            int64Val:
              type: integer
              format: int64
            stringVal:
              type: string
            dateVal:
              type: string
              description: Format YYYY-MM-DD
            timestampVal:
              type: string
              description: Format YYYY-MM-DD hh:mm:ss
            doubleVal:
              type: number
              format: double

    DataTypeV2:
      type: string
      enum: ["INT64", "STRING", "BOOLEAN", "DATE", "TIMESTAMP", "DOUBLE"]

    QueryV2:
      type: object
      description: Query for entity instances
      properties:
        includeAttributes:
          description: Attributes to include in the returned instances
          type: array
          items:
            type: string
        includeHierarchyFields:
          description: Hierarchy fields to include in the returned instances. All fields will be returned for each hierarchy specified.
          type: object
          properties:
            hierarchies:
              type: array
              description: Hierarchy names
              items:
                type: string
            fields:
              type: array
              items:
                type: string
                enum: ["IS_MEMBER", "PATH", "NUM_CHILDREN", "IS_ROOT"]
        includeRelationshipFields:
          description: Relationship (count) fields to include in the returned instances.
          type: array
          items:
            type: object
            description: Related entity and optional hierarchies. Per-node rollups are always returned.
            properties:
              relatedEntity:
                type: string
              hierarchies:
                type: array
                description: Hierarchy names
                items:
                  type: string
        filter:
          $ref: "#/components/schemas/FilterV2"
        orderBys:
          type: array
          description: Attributes and direction to order the results by
          items:
            type: object
            description: Attribute or relationship (count) field and the direction
            properties:
              attribute:
                type: string
              relationshipField:
                type: object
                properties:
                  relatedEntity:
                    type: string
                  hierarchy:
                    type: string
              direction:
                $ref: "#/components/schemas/OrderByDirectionV2"
        limit:
          $ref: "#/components/schemas/LimitV2"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    CountQueryV2:
      type: object
      description: Count entity instances
      properties:
        attributes:
          description: |
            Attributes to group by. One count will be returned for each possible combination of attribute values 
            (e.g. [gender, hair_color] will return counts for man+red, man+black, woman+red, woman+black).
          type: array
          items:
            type: string
        filter:
          $ref: "#/components/schemas/FilterV2"

    HintQueryV2:
      type: object
      description: Get display hints
      properties:
        relatedEntity:
          description: |
            Optional related entity.
            If specified, then we return hints computed across related instances (e.g. condition occurrences where condition id=11).
            Otherwise, we return hints computed across all instances (e.g. all persons).
          type: object
          properties:
            name:
              type: string
              description: Related entity name
            id:
              $ref: "#/components/schemas/LiteralV2"

    ReviewQueryV2:
      type: object
      description: Query for review instances and annotations
      properties:
        includeAttributes:
          description: Attributes to include in the returned instances
          type: array
          items:
            type: string
        entityFilter:
          $ref: "#/components/schemas/FilterV2"
        annotationFilter:
          $ref: "#/components/schemas/AnnotationFilterV2"
        orderBys:
          type: array
          description: Attributes or annotations, and direction to order the results by
          items:
            type: object
            description: Attribute or annotation and the direction
            properties:
              attribute:
                type: string
                description: Name of the attribute
              annotation:
                type: string
                description: ID of the annotation
              direction:
                $ref: "#/components/schemas/OrderByDirectionV2"
        limit:
          $ref: "#/components/schemas/LimitV2"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    ReviewCountQueryV2:
      type: object
      description: Count review instances
      properties:
        attributes:
          description: |
            Attributes to group by. One count will be returned for each possible combination of attribute values 
            (e.g. [gender, hair_color] will return counts for man+red, man+black, woman+red, woman+black).
          type: array
          items:
            type: string

    FilterV2:
      type: object
      description: Union of references to each filter type. Exactly one should be specified based on the filterType.
      properties:
        filterType:
          type: string
          enum:
            ["ATTRIBUTE", "TEXT", "HIERARCHY", "RELATIONSHIP", "BOOLEAN_LOGIC"]
        filterUnion:
          type: object
          properties:
            attributeFilter:
              $ref: "#/components/schemas/AttributeFilterV2"
            textFilter:
              $ref: "#/components/schemas/TextFilterV2"
            hierarchyFilter:
              $ref: "#/components/schemas/HierarchyFilterV2"
            relationshipFilter:
              $ref: "#/components/schemas/RelationshipFilterV2"
            booleanLogicFilter:
              $ref: "#/components/schemas/BooleanLogicFilterV2"

    AttributeFilterV2:
      type: object
      description: Filter on an attribute value (e.g. color=red)
      properties:
        attribute:
          type: string
        operator:
          $ref: "#/components/schemas/BinaryOperatorV2"
        value:
          $ref: "#/components/schemas/LiteralV2"

    TextFilterV2:
      type: object
      description: Filter on a text search (e.g. person sounds like Joe)
      properties:
        matchType:
          type: string
          enum: ["EXACT_MATCH", "FUZZY_MATCH"]
        attribute:
          type: string
          description: |
            Attribute to match on. If not specified, then we match on whatever is specified in the text search mapping config.
            Currently, fuzzy match only works on a single attribute (i.e. you must specify this field for fuzzy match).
        text:
          type: string

    HierarchyFilterV2:
      type: object
      description: Filter on a hierarchy (e.g. descendant of id=12)
      properties:
        hierarchy:
          description: Name of the hierarchy
          type: string
        operator:
          type: string
          enum: ["CHILD_OF", "DESCENDANT_OF_INCLUSIVE", "IS_ROOT", "IS_MEMBER"]
        value:
          $ref: "#/components/schemas/LiteralV2"

    RelationshipFilterV2:
      type: object
      description: |
        Filter on a relationship between entities (e.g. condition occurrences where condition=diabetes).
        If one of the group_by fields are set, they must all be set. If group_by_fields are set:
        - First subfilter runs
        - subfilter results are grouped by group_by_count_attribute
        - Instance will be returned only if there are group_by_count_operator group_by_count_value results for that
          instance
        group_by fields can be used to filter on # of occurrence dates.
      properties:
        entity:
          type: string
        subfilter:
          $ref: "#/components/schemas/FilterV2"
        group_by_count_attribute:
          type: string
        group_by_count_operator:
          $ref: "#/components/schemas/BinaryOperatorV2"
        group_by_count_value:
          type: integer
          nullable: true

    BooleanLogicFilterV2:
      type: object
      description: |
        Compose multiple filters (e.g. color=red AND capacity=3, NOT color=red). 
        The NOT operator only allows a single subfilter. The OR and AND operators require more than one subfilter.
      properties:
        operator:
          type: string
          enum: ["AND", "OR", "NOT"]
        subfilters:
          type: array
          items:
            $ref: "#/components/schemas/FilterV2"

    AnnotationFilterV2:
      type: object
      description: Filter on an annotation value (e.g. reviewStatus=complete)
      properties:
        annotation:
          type: string
        operator:
          type: string
          enum: ["EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN"]
        value:
          $ref: "#/components/schemas/LiteralV2"

    OrderByDirectionV2:
      type: string
      description: Defaults to ascending
      enum: ["ASCENDING", "DESCENDING"]

    LimitV2:
      type: integer
      description: Maximum number of results to return. Defaults to 250.
      default: 250

    InstanceV2:
      type: object
      properties:
        attributes:
          description: A map of entity attribute names to their value for this instance. Only the attributes requested are populated.
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplayV2"
        hierarchyFields:
          description: Hierarchy field values for this instance. One set of values per hierarchy. Only the values requested are populated.
          type: array
          items:
            type: object
            properties:
              hierarchy:
                type: string
              isMember:
                type: boolean
              path:
                type: string
              numChildren:
                type: integer
              isRoot:
                type: boolean
        relationshipFields:
          description: Relationship field values for this instance. Only the values requested are populated.
          type: array
          items:
            type: object
            properties:
              relatedEntity:
                type: string
              hierarchy:
                type: string
              count:
                type: integer
              displayHints:
                type: string

    InstanceListResultV2:
      type: object
      description: List of instances
      properties:
        sql:
          type: string
        instances:
          type: array
          items:
            $ref: "#/components/schemas/InstanceV2"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    InstanceCountV2:
      type: object
      properties:
        count:
          type: integer
        attributes:
          description: A map of entity attribute names to their value for this group
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplayV2"

    InstanceCountListV2:
      type: object
      description: List of instance counts
      properties:
        sql:
          type: string
        instanceCounts:
          type: array
          items:
            $ref: "#/components/schemas/InstanceCountV2"

    DisplayHintV2:
      type: object
      description: Display hint for entity attribute
      properties:
        attribute:
          $ref: "#/components/schemas/AttributeV2"
        displayHint:
          type: object
          description: Display hint calculated from source data
          properties:
            enumHint:
              $ref: "#/components/schemas/DisplayHintEnumV2"
            numericRangeHint:
              $ref: "#/components/schemas/DisplayHintNumericRangeV2"

    DisplayHintEnumV2:
      type: object
      description: Enumeration of possible values, display strings, and counts
      properties:
        enumHintValues:
          type: array
          items:
            type: object
            description: Enum value and count
            properties:
              enumVal:
                $ref: "#/components/schemas/ValueDisplayV2"
              count:
                type: integer

    DisplayHintNumericRangeV2:
      type: object
      description: Maximum and minimum values
      properties:
        min:
          description: Max value
          type: number
          format: double
        max:
          description: Min value
          type: number
          format: double

    DisplayHintListV2:
      type: object
      description: List of display hints
      properties:
        sql:
          type: string
        displayHints:
          type: array
          items:
            $ref: "#/components/schemas/DisplayHintV2"

    StudyV2:
      type: object
      required: [id, created, createdBy, lastModified]
      properties:
        id:
          $ref: "#/components/schemas/StudyIdV2"
        displayName:
          $ref: "#/components/schemas/StudyDisplayNameV2"
        description:
          $ref: "#/components/schemas/StudyDescriptionV2"
        properties:
          $ref: "#/components/schemas/PropertiesV2"
        created:
          type: string
          format: date-time
        createdBy:
          description: Email of user who created the study
          type: string
        lastModified:
          type: string
          format: date-time
        isDeleted:
          type: boolean
          nullable: false

    StudyListV2:
      type: array
      items:
        $ref: "#/components/schemas/StudyV2"

    StudyCreateInfoV2:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/StudyIdV2"
        displayName:
          $ref: "#/components/schemas/StudyDisplayNameV2"
        description:
          $ref: "#/components/schemas/StudyDescriptionV2"
        properties:
          $ref: "#/components/schemas/PropertiesV2"

    StudyUpdateInfoV2:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/StudyDisplayNameV2"
        description:
          $ref: "#/components/schemas/StudyDescriptionV2"

    StudyIdV2:
      type: string
      description: ID of the study, immutable

    StudyDisplayNameV2:
      type: string
      description: Human readable name of the study

    StudyDescriptionV2:
      type: string
      description: Description of the study

    PropertiesV2:
      description: List of key-value pairs of strings
      type: array
      items:
        $ref: "#/components/schemas/PropertyKeyValueV2"

    # There seems to be a bug in the TS code generator that fails to create
    # proper objects for these when they're nested directy inside PropertiesV2.
    # It instead leaves them as untyped "object". My best guess is that it's
    # cause by having an array as the top level object and it fails to generate
    # a nested type for that case like for nested objects under other objects.
    # I've moved it out into a separate top level type as a workaround.
    PropertyKeyValueV2:
      type: object
      required: [key, value]
      properties:
        key:
          description: |
            String to identify the key. Keys must be 1-1024 characters, using letters,
            numbers, dashes, and underscores and must not start with a dash or underscore.
          type: string
        value:
          description: Arbitrary string value
          type: string

    PropertyKeysV2:
      description: List of property keys
      type: array
      items:
        type: string

    CohortV2:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CohortIdV2"
        revisionId:
          description: ID of the cohort revision, if frozen, null otherwise
          $ref: "#/components/schemas/CohortRevisionIdV2"
          nullable: true
        underlayName:
          $ref: "#/components/schemas/UnderlayNameV2"
        displayName:
          $ref: "#/components/schemas/CohortDisplayNameV2"
        description:
          $ref: "#/components/schemas/CohortDescriptionV2"
        criteriaGroupSections:
          type: array
          description: Criteria group sections that define the entity filter
          items:
            $ref: "#/components/schemas/CriteriaGroupSectionV3"
        created:
          description: Timestamp of when the cohort was created
          type: string
          format: date-time
        createdBy:
          description: Email of user who created cohort
          type: string
        lastModified:
          description: Timestamp of when the cohort was last modified
          type: string
          format: date-time
        isDeleted:
          type: boolean
      required:
        - id
        - underlayName
        - displayName
        - criteriaGroups
        - created
        - createdBy
        - lastModified

    CohortListV2:
      type: array
      items:
        $ref: "#/components/schemas/CohortV2"

    CohortIdV2:
      type: string
      description: ID of the cohort, immutable

    CohortRevisionIdV2:
      type: string
      description: ID of a frozen cohort revision, immutable

    CohortCreateInfoV2:
      type: object
      properties:
        underlayName:
          $ref: "#/components/schemas/UnderlayNameV2"
        displayName:
          $ref: "#/components/schemas/CohortDisplayNameV2"
        description:
          $ref: "#/components/schemas/CohortDescriptionV2"

    CohortUpdateInfoV2:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/CohortDisplayNameV2"
        description:
          $ref: "#/components/schemas/CohortDescriptionV2"
        criteriaGroupSections:
          type: array
          description: Criteria group sections that define the entity filter
          items:
            $ref: "#/components/schemas/CriteriaGroupSectionV3"

    CohortDisplayNameV2:
      type: string
      description: Human readable name of the cohort

    CohortDescriptionV2:
      type: string
      description: Description of the cohort

    ConceptSetV2:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ConceptSetIdV2"
        underlayName:
          $ref: "#/components/schemas/UnderlayNameV2"
        entity:
          $ref: "#/components/schemas/EntityNameV2"
        displayName:
          $ref: "#/components/schemas/ConceptSetDisplayNameV2"
        description:
          $ref: "#/components/schemas/ConceptSetDescriptionV2"
        criteria:
          $ref: "#/components/schemas/CriteriaV2"
        created:
          description: Timestamp of when the concept set was created
          type: string
          format: date-time
        createdBy:
          description: Email of user who created the concept set
          type: string
        lastModified:
          description: Timestamp of when the concept set was last modified
          type: string
          format: date-time
      required:
        - id
        - underlayName
        - entity
        - displayName
        - criteria
        - created
        - createdBy
        - lastModified

    ConceptSetListV2:
      type: array
      items:
        $ref: "#/components/schemas/ConceptSetV2"

    ConceptSetIdV2:
      type: string
      description: ID of the concept set, immutable

    ConceptSetCreateInfoV2:
      type: object
      properties:
        underlayName:
          $ref: "#/components/schemas/UnderlayNameV2"
        entity:
          $ref: "#/components/schemas/EntityNameV2"
        displayName:
          $ref: "#/components/schemas/ConceptSetDisplayNameV2"
        description:
          $ref: "#/components/schemas/ConceptSetDescriptionV2"
        criteria:
          $ref: "#/components/schemas/CriteriaV2"

    ConceptSetUpdateInfoV2:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/EntityNameV2"
        displayName:
          $ref: "#/components/schemas/ConceptSetDisplayNameV2"
        description:
          $ref: "#/components/schemas/ConceptSetDescriptionV2"
        criteria:
          $ref: "#/components/schemas/CriteriaV2"

    EntityNameV2:
      type: string
      description: Name of the entity (e.g. condition_occurrence)

    ConceptSetDisplayNameV2:
      type: string
      description: Human readable name of the concept set

    ConceptSetDescriptionV2:
      type: string
      description: Description of the concept set

    UnderlayNameV2:
      type: string
      description: Name of the underlay, immutable

    CriteriaGroupV2:
      type: object
      description: Group of criteria for a cohort definition
      properties:
        id:
          type: string
          description: ID of the group, immutable
        displayName:
          type: string
          description: Name of the group
        criteria:
          type: array
          description: Set of criteria in the group
          items:
            $ref: "#/components/schemas/CriteriaV2"
        operator:
          type: string
          description: Operator to use when combining the criteria in the group
          enum: ["AND", "OR"]
        excluded:
          type: boolean
          description: True to exclude the group, false to include it
      required:
        - id
        - displayName
        - criteria
        - operator
        - excluded

    CriteriaGroupSectionV3:
      type: object
      description: Section of criteria groups and boolean logic operators to combine them
      properties:
        id:
          type: string
          description: ID of the section, immutable
        displayName:
          type: string
          description: Name of the section
        criteriaGroups:
          type: array
          description: Set of criteria groups in the section
          items:
            $ref: "#/components/schemas/CriteriaGroupV3"
        operator:
          type: string
          description: Operator to use when combining the criteria groups in the section
          enum: ["AND", "OR"]
        excluded:
          type: boolean
          description: True to exclude the section, false to include it
      required:
        - id
        - displayName
        - criteriaGroups
        - operator
        - excluded

    CriteriaGroupV3:
      type: object
      description: Group of related criteria (primary + modifiers)
      properties:
        id:
          type: string
          description: ID of the group, immutable
        displayName:
          type: string
          description: Name of the group
        criteria:
          type: array
          description: Set of criteria in the group
          items:
            $ref: "#/components/schemas/CriteriaV2"
        entity:
          description: Entity referenced by the criteria
          type: string
        groupByCountOperator:
          description: Operator to use for the optional group by count modifier
          $ref: "#/components/schemas/BinaryOperatorV2"
        groupByCountValue:
          type: integer
          description: Value to use for the optional group by count modifier
          nullable: true
      required:
        - id
        - displayName
        - criteria
        - entity

    CriteriaV2:
      type: object
      description: Single criteria for a cohort or concept set definition
      properties:
        id:
          type: string
          description: ID of the criteria, immutable
        displayName:
          type: string
          description: Name of the criteria
        pluginName:
          type: string
          description: Name of the plugin that generated this criteria
        selectionData:
          type: string # JSON formatted
          description: Serialized plugin-specific representation of the user's selection
        uiConfig:
          # TODO: Remove this uiConfig property from the service API once we fully support UI plugins, because it
          # should be identical to the static config stored in the underlay. For now, we save it separately for
          # each criteria so we can handle schema changes in the UI code instead of in plugin-specific backend code.
          type: string # JSON formatted
          description: Serialized plugin-specific UI configuration for the criteria
        tags:
          description: Unstructured key-value tags for the criteria
          type: object
          additionalProperties:
            type: string
            nullable: true
      required:
        - id
        - displayName
        - pluginName
        - selectionData
        - uiConfig
        - tags

    ReviewV2:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ReviewIdV2"
        displayName:
          $ref: "#/components/schemas/ReviewDisplayNameV2"
        description:
          $ref: "#/components/schemas/ReviewDescriptionV2"
        size:
          $ref: "#/components/schemas/ReviewSizeV2"
        cohort:
          $ref: "#/components/schemas/CohortV2"
        created:
          description: Timestamp of when the review was created
          type: string
          format: date-time
        createdBy:
          description: Email of user who created the review
          type: string
        lastModified:
          description: Timestamp of when the review was last modified
          type: string
          format: date-time
      required:
        - id
        - displayName
        - size
        - cohortRevision
        - created
        - createdBy
        - lastModified

    ReviewListV2:
      type: array
      items:
        $ref: "#/components/schemas/ReviewV2"

    ReviewCreateInfoV2:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/ReviewDisplayNameV2"
        description:
          $ref: "#/components/schemas/ReviewDescriptionV2"
        size:
          $ref: "#/components/schemas/ReviewSizeV2"
        filter:
          # TODO: Remove this filter property from the service API once we fully support UI plugins, because the
          # plugin-specific backend code will generate it from the cohort definition. For now, the UI builds the
          # cohort filter and passes it to the backend when we create a review, so the backend can take a random
          # sample and preserve it.
          $ref: "#/components/schemas/FilterV2"
      required:
        - displayName
        - size
        - filter

    ReviewUpdateInfoV2:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/ReviewDisplayNameV2"
        description:
          $ref: "#/components/schemas/ReviewDescriptionV2"

    ReviewIdV2:
      type: string
      description: ID of the review, immutable

    ReviewDisplayNameV2:
      type: string
      description: Human readable name of the review

    ReviewDescriptionV2:
      type: string
      description: Description of the review

    ReviewSizeV2:
      type: integer
      description: Number of primary entity instances included in the review

    AnnotationV2:
      type: object
      properties:
        id:
          description: ID of the annotation, immutable
          type: string
        displayName:
          $ref: "#/components/schemas/AnnotationDisplayNameV2"
        description:
          $ref: "#/components/schemas/AnnotationDescriptionV2"
        dataType:
          $ref: "#/components/schemas/DataTypeV2"
        enumVals:
          type: array
          description: |
            May only be set if dataType=STRING. Annotation value must be one of
            enumVals.
          items:
            type: string
      required:
        - id
        - displayName
        - dataType

    AnnotationListV2:
      type: array
      items:
        $ref: "#/components/schemas/AnnotationV2"

    AnnotationCreateInfoV2:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/AnnotationDisplayNameV2"
        description:
          $ref: "#/components/schemas/AnnotationDescriptionV2"
        dataType:
          $ref: "#/components/schemas/DataTypeV2"
        enumVals:
          type: array
          description: |
            May only be set if dataType=STRING. Annotation value must be one of
            enumVals.
          items:
            type: string
      required:
        - displayName
        - dataType

    AnnotationUpdateInfoV2:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/AnnotationDisplayNameV2"
        description:
          $ref: "#/components/schemas/AnnotationDescriptionV2"

    AnnotationDisplayNameV2:
      type: string
      description: Human readable name of the annotation

    AnnotationDescriptionV2:
      type: string
      description: Description of the annotation

    AnnotationValueV2:
      type: object
      properties:
        instanceId:
          description: ID of the annotation value, immutable
          type: string
        value:
          $ref: "#/components/schemas/LiteralV2"
        isMostRecent:
          type: boolean
        isPartOfSelectedReview:
          type: boolean
      required:
        - instanceId
        - value
        - isMostRecent
        - isPartOfSelectedReview

    ReviewInstanceV2:
      type: object
      properties:
        stableIndex:
          description: Index of the instance, unchanged when sorting
          type: integer
        attributes:
          description: |
            A map of entity attribute names to their value for this instance. The id attribute will always be included.
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplayV2"
        annotations:
          description: A map of annotation ids to their values for this instance in this review
          type: object
          additionalProperties:
            type: array
            nullable: true
            items:
              $ref: "#/components/schemas/AnnotationValueV2"

    ReviewInstanceListResultV2:
      type: object
      description: List of instances
      properties:
        sql:
          type: string
        instances:
          type: array
          items:
            $ref: "#/components/schemas/ReviewInstanceV2"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    VumcAdminServiceTest:
      type: object
      properties:
        version:
          type: string
        round-trip:
          type: string

    ExportRequest:
      type: object
      properties:
        exportModel:
          description: Name of the export model to use
          type: string
        inputs:
          description: Key-value map of the export model inputs (e.g. filenamePrefix=test)
          type: object
          additionalProperties:
            type: string
            nullable: true
        redirectBackUrl:
          type: string
          nullable: true
        study:
          type: string
          nullable: false
        cohorts:
          description: List of cohort ids
          type: array
          items:
            type: string
        includeAnnotations:
          description: Include the annotation data when true
          type: boolean
        instanceQuerys:
          # TODO: Replace this with a list of concept set ids once we can build the entity filters on the backend.
          type: array
          items:
            type: object
            properties:
              entity:
                type: string
                nullable: false
              query:
                $ref: "#/components/schemas/QueryV2"
        primaryEntityFilter:
          # TODO: Remove this filter property from the service API once we fully support UI plugins, because the
          # plugin-specific backend code will generate it from the cohort definition. For now, the UI builds the
          # cohort filter and passes it to the backend when we export a cohort(s), so the backend can count the
          # number of records and store it in the activity log.
          $ref: "#/components/schemas/FilterV2"

    ExportResult:
      type: object
      properties:
        status:
          type: string
          enum: [ "RUNNING", "COMPLETE" ]
        redirectAwayUrl:
          type: string
          nullable: true
        outputs:
          description: Key-value map of the export model outputs (e.g. signedUrl=gs://... )
          type: object
          additionalProperties:
            type: string

    ExportModel:
      type: object
      properties:
        name:
          type: string
          nullable: false
        displayName:
          type: string
          nullable: false
        description:
          type: string
          nullable: true
        inputs:
          description: Map of input parameter names to descriptions
          type: object
          additionalProperties:
            type: string
            nullable: true
        outputs:
          description: Map of output parameters names to descriptions
          type: object
          additionalProperties:
            type: string
            nullable: true

    ExportModelList:
      type: array
      items:
        $ref: "#/components/schemas/ExportModel"

    ResourceType:
      type: string
      enum: [ "STUDY", "COHORT", "REVIEW" ]

    Resource:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ResourceType"
          nullable: false
        studyId:
          $ref: "#/components/schemas/StudyIdV2"
          nullable: false
        studyDisplayName:
          $ref: "#/components/schemas/StudyDisplayNameV2"
          nullable: true
        studyProperties:
          $ref: "#/components/schemas/PropertiesV2"
          nullable: true
        cohortId:
          $ref: "#/components/schemas/CohortIdV2"
          nullable: true
        cohortDisplayName:
          $ref: "#/components/schemas/CohortDisplayNameV2"
          nullable: true
        cohortRevisionId:
          $ref: "#/components/schemas/CohortRevisionIdV2"
          nullable: true
        reviewId:
          $ref: "#/components/schemas/ReviewIdV2"
          nullable: true
        reviewDisplayName:
          $ref: "#/components/schemas/ReviewDisplayNameV2"
          nullable: true
      required:
        - type
        - studyId

    ActivityType:
      type: string
      enum: [ "CREATE_STUDY", "DELETE_STUDY", "CREATE_COHORT", "DELETE_COHORT", "EXPORT_COHORT", "CREATE_REVIEW", "DELETE_REVIEW" ]

    ActivityLogEntry:
      type: object
      properties:
        id:
          type: string
          nullable: false
        userEmail:
          type: string
          nullable: false
        logged:
          type: string
          format: date-time
          nullable: false
        systemVersion:
          $ref: "#/components/schemas/SystemVersionV2"
          nullable: false
        activityType:
          $ref: "#/components/schemas/ActivityType"
          nullable: false
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        additionalInfo:
          description: Additional information for specific activity types
          type: object
          properties:
            exportModel:
              description: (EXPORT_COHORT) Name of the export model used
              type: string
              nullable: true
            primaryEntityCount:
              description: (EXPORT_COHORT, CREATE_REVIEW) Number of primary entity instances included in the cohort revision
              type: integer
              nullable: true
      required:
        - id
        - userEmail
        - logged
        - systemVersion
        - activityType

    ActivityLogEntryList:
      type: array
      items:
        $ref: "#/components/schemas/ActivityLogEntry"

    ErrorReportV2:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    PageSize:
      type: integer

    PageMarker:
      type: string

    BinaryOperatorV2:
      type: string
      enum:
        [
          "EQUALS",
          "NOT_EQUALS",
          "LESS_THAN",
          "GREATER_THAN",
          "LESS_THAN_OR_EQUAL",
          "GREATER_THAN_OR_EQUAL",
        ]

  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
    bearerAuth:
      type: http
      scheme: bearer

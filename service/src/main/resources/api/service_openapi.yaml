openapi: 3.0.3
info:
  title: Tanagra Service API
  description: github.com/DataBiosphere/tanagra
  version: 0.0.0

servers:
  - url: /

security:
  - bearerAuth: []
  - authorization: [openid, email, profile]

paths:
  "/status":
    get:
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags: [Unauthenticated]
      responses:
        200:
          description: Service can process requests
        500:
          description: Service is broken

  "/v2/version":
    get:
      summary: Returns the deployed version of the service
      operationId: serviceVersion
      tags: [Unauthenticated]
      responses:
        200:
          description: Version properties
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SystemVersion"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/profile":
    get:
      tags: [Users]
      description: Returns the current user's profile information
      operationId: getMe
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserProfile"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays":
    get:
      summary: List the underlays
      operationId: listUnderlays
      tags: [Underlays]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnderlayList"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
    get:
      summary: Get an underlay
      operationId: getUnderlay
      tags: [Underlays]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Underlay"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
    get:
      summary: List the entities in an underlay
      operationId: listEntities
      tags: [Underlays]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityList"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
      - $ref: "#/components/parameters/EntityName"
    get:
      summary: Get an entity
      operationId: getEntity
      tags: [Underlays]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}/instances":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
      - $ref: "#/components/parameters/EntityName"
    post:
      summary: List entity instances
      operationId: listInstances
      tags: [Underlays]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Query"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceListResult"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}/counts":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
      - $ref: "#/components/parameters/EntityName"
    post:
      summary: Count entity instances
      operationId: countInstances
      tags: [Underlays]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountQuery"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceCountList"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/entities/{entityName}/hints":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
      - $ref: "#/components/parameters/EntityName"
    post:
      summary: Query entity display hints
      operationId: queryHints
      tags: [Underlays]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/HintQuery"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DisplayHintList"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies":
    get:
      parameters:
        - $ref: "#/components/parameters/StudyFilterDisplayName"
        - $ref: "#/components/parameters/StudyFilterDescription"
        - $ref: "#/components/parameters/StudyFilterCreatedBy"
        - $ref: "#/components/parameters/StudyFilterIncludeDeleted"
        - $ref: "#/components/parameters/StudyFilterProperties"
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      summary: List all studies a user can read
      operationId: listStudies
      tags: [Studies]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudyList"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new study
      operationId: createStudy
      tags: [Studies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudyCreateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}":
    parameters:
      - $ref: "#/components/parameters/StudyId"
    get:
      summary: Get an existing study
      operationId: getStudy
      tags: [Studies]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing study
      operationId: updateStudy
      tags: [Studies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StudyUpdateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Study"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a study
      operationId: deleteStudy
      tags: [Studies]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/properties":
    parameters:
      - $ref: "#/components/parameters/StudyId"
    post:
      summary: |
        Update the properties in a study. Only properties with keys in request 
        are updated. Properties with keys not in request are not updated.
      operationId: updateStudyProperties
      tags: [Studies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Properties"
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: |
        Delete properties in a study. Only properties with keys in
        request are deleted. Properties with keys not in request are not
        deleted.
      operationId: deleteStudyProperties
      tags: [Studies]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PropertyKeys"
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts":
    parameters:
      - $ref: "#/components/parameters/StudyId"
    get:
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      summary: List all cohorts in a study
      operationId: listCohorts
      tags: [Cohorts]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CohortList"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new cohort
      operationId: createCohort
      tags: [Cohorts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CohortCreateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cohort"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
      - $ref: "#/components/parameters/CohortRevisionId"
    get:
      summary: Get an existing cohort
      operationId: getCohort
      tags: [Cohorts]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cohort"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing cohort
      operationId: updateCohort
      tags: [Cohorts]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CohortUpdateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cohort"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a cohort
      operationId: deleteCohort
      tags: [Cohorts]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
    get:
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      summary: List all reviews for a cohort
      operationId: listReviews
      tags: [Reviews]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewList"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new review
      operationId: createReview
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCreateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews/{reviewId}":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
      - $ref: "#/components/parameters/ReviewId"
    get:
      summary: Get an existing review
      operationId: getReview
      tags: [Reviews]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing review
      operationId: updateReview
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewUpdateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Review"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a review
      operationId: deleteReview
      tags: [Reviews]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews/{reviewId}/instances":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
      - $ref: "#/components/parameters/ReviewId"
    post:
      summary: List primary entity instances in a review and any associated annotation values
      operationId: listReviewInstancesAndAnnotations
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewQuery"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewInstanceListResult"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/reviews/{reviewId}/counts":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
      - $ref: "#/components/parameters/ReviewId"
    post:
      summary: Count primary entity instances in a review
      operationId: countReviewInstances
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewCountQuery"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstanceCountList"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/annotations":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
    get:
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      summary: List all annotation keys for a cohort
      operationId: listAnnotationKeys
      tags: [Annotations]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AnnotationList"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new annotation key
      operationId: createAnnotationKey
      tags: [Annotations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationCreateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/annotations/{annotationId}":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
      - $ref: "#/components/parameters/AnnotationId"
    get:
      summary: Get an existing annotation key
      operationId: getAnnotationKey
      tags: [Annotations]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing annotation key
      operationId: updateAnnotationKey
      tags: [Annotations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AnnotationUpdateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Annotation"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an annotation key
      operationId: deleteAnnotationKey
      tags: [Annotations]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/cohorts/{cohortId}/annotations/{annotationId}/reviews/{reviewId}/values/{instanceId}":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/CohortId"
      - $ref: "#/components/parameters/AnnotationId"
      - $ref: "#/components/parameters/ReviewId"
      - $ref: "#/components/parameters/PrimaryEntityInstanceId"
    post:
      summary: Create or update an annotation value
      operationId: updateAnnotationValue
      tags: [Annotations]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Literal"
      responses:
        200:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete an annotation value
      operationId: deleteAnnotationValues
      tags: [Annotations]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/conceptSets":
    parameters:
      - $ref: "#/components/parameters/StudyId"
    get:
      parameters:
        - $ref: "#/components/parameters/Offset"
        - $ref: "#/components/parameters/Limit"
      summary: List all concept sets in a study
      operationId: listConceptSets
      tags: [ConceptSets]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSetList"
        500:
          $ref: "#/components/responses/ServerError"
    post:
      summary: Create a new concept set
      operationId: createConceptSet
      tags: [ConceptSets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptSetCreateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSet"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/studies/{studyId}/conceptSets/{conceptSetId}":
    parameters:
      - $ref: "#/components/parameters/StudyId"
      - $ref: "#/components/parameters/ConceptSetId"
    get:
      summary: Get an existing concept set
      operationId: getConceptSet
      tags: [ConceptSets]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSet"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    patch:
      summary: Update an existing concept set
      operationId: updateConceptSet
      tags: [ConceptSets]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConceptSetUpdateInfo"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ConceptSet"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"
    delete:
      summary: Delete a concept set
      operationId: deleteConceptSet
      tags: [ConceptSets]
      responses:
        204:
          description: OK
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/exportModels":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
    get:
      summary: List the available export models
      operationId: listExportModels
      tags: [Export]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportModelList"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/underlays/{underlayName}/export":
    parameters:
      - $ref: "#/components/parameters/UnderlayName"
    post:
      summary: Export entity instances and review annotations
      operationId: exportInstancesAndAnnotations
      tags: [Export]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportRequest"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExportResult"
        404:
          $ref: "#/components/responses/NotFound"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/activityLogEntries":
    parameters:
      - $ref: "#/components/parameters/ActivityLogFilterUserEmail"
      - $ref: "#/components/parameters/ActivityLogFilterExactMatch"
      - $ref: "#/components/parameters/ActivityLogFilterResourceType"
      - $ref: "#/components/parameters/ActivityLogFilterActivityType"
      - $ref: "#/components/parameters/Offset"
      - $ref: "#/components/parameters/Limit"
    get:
      summary: List the activity log entries
      operationId: listActivityLogEntries
      tags: [ActivityLog]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLogEntryList"
        500:
          $ref: "#/components/responses/ServerError"

  "/v2/activityLogEntries/{activityLogEntryId}":
    parameters:
      - $ref: "#/components/parameters/ActivityLogEntryId"
    get:
      summary: Get an activity log entry
      operationId: getActivityLogEntry
      tags: [ActivityLog]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityLogEntry"
        500:
          $ref: "#/components/responses/ServerError"

  /v2/vumc-admin-service-test:
    get:
      tags: [Test]
      description: Temporary endpoint to test service-to-service communication with the VUMC admin service.
      operationId: vumcAdminServiceTest
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VumcAdminServiceTest"
        401:
          description: Unauthorized
        500:
          $ref: "#/components/responses/ServerError"

components:
  parameters:
    UnderlayName:
      name: underlayName
      in: path
      description: Name of the underlay
      required: true
      schema:
        type: string

    EntityName:
      name: entityName
      in: path
      description: Name of the entity
      required: true
      schema:
        type: string

    StudyId:
      name: studyId
      in: path
      description: ID of the study
      required: true
      schema:
        type: string

    CohortId:
      name: cohortId
      in: path
      description: ID of the cohort
      required: true
      schema:
        type: string

    CohortRevisionId:
      name: cohortRevisionId
      in: query
      description: ID of the cohort revision
      required: false
      schema:
        type: string

    ConceptSetId:
      name: conceptSetId
      in: path
      description: ID of the concept set
      required: true
      schema:
        type: string

    ReviewId:
      name: reviewId
      in: path
      description: ID of the review
      required: true
      schema:
        type: string

    AnnotationId:
      name: annotationId
      in: path
      description: ID of the annotation
      required: true
      schema:
        type: string

    PrimaryEntityInstanceId:
      name: instanceId
      in: path
      description: ID of the primary entity instance that the annotation value is associated with
      required: true
      schema:
        type: string

    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0

    Limit:
      name: limit
      in: query
      description: The maximum number of items to return. Default 15
      required: false
      schema:
        type: integer
        minimum: 1
        default: 15

    StudyFilterDisplayName:
      name: displayName
      in: query
      description: Text search on the study display name
      required: false
      schema:
        type: string

    StudyFilterDescription:
      name: description
      in: query
      description: Text search on the study description
      required: false
      schema:
        type: string

    StudyFilterCreatedBy:
      name: createdBy
      in: query
      description: Text search on the study created by email
      required: false
      schema:
        type: string

    StudyFilterIncludeDeleted:
      name: includeDeleted
      in: query
      description: True to include studies that have been deleted
      required: false
      schema:
        type: boolean

    StudyFilterProperties:
      name: properties
      in: query
      description: Text search on the study metadata properties. The list must alternate key1, value1, key2, value2.
      required: false
      schema:
        type: array
        items:
          type: string

    ActivityLogFilterUserEmail:
      name: userEmail
      in: query
      description: Text search on the activity log entry user email
      required: false
      schema:
        type: string

    ActivityLogFilterExactMatch:
      name: exactMatch
      in: query
      description: True if the user email filter should check for an exact match
      required: false
      schema:
        type: boolean
        default: false

    ActivityLogFilterResourceType:
      name: resourceType
      in: query
      description: Filter on the activity log entry resource type
      required: false
      schema:
        $ref: "#/components/schemas/ResourceType"

    ActivityLogFilterActivityType:
      name: activityType
      in: query
      description: Filter on the activity log entry activity type
      required: false
      schema:
        $ref: "#/components/schemas/ActivityType"

    ActivityLogEntryId:
      name: activityLogEntryId
      in: path
      description: ID of the activity log entry
      required: true
      schema:
        type: string

  responses:
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReport"

    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorReport"

  schemas:
    SystemVersion:
      type: object
      required: [gitTag, gitHash, github, build]
      properties:
        gitTag:
          type: string
          description: Git tag of currently deployed app.
        gitHash:
          type: string
          description: Git hash of currently deployed app.
        github:
          type: string
          description: Github link to currently deployed commit.
        build:
          type: string
          description: Version of the currently deployed app declared in build.gradle. Client and server versions are linked.

    UserProfile:
      type: object
      description: User profile
      properties:
        email:
          type: string
        subjectId:
          type: string
      required:
        - email
        - subjectId

    Underlay:
      type: object
      description: Underlay
      properties:
        name:
          description: Name
          type: string
        displayName:
          description: Display name
          type: string
        primaryEntity:
          description: Primary entity name
          type: string
        uiConfiguration:
          description: UI configuration
          type: string
      required:
        - name
        - primaryEntity

    UnderlayList:
      type: object
      description: List of underlays
      properties:
        underlays:
          type: array
          items:
            $ref: "#/components/schemas/Underlay"

    Entity:
      type: object
      description: Entity
      properties:
        name:
          description: Name
          type: string
        idAttribute:
          description: ID attribute name
          type: string
        attributes:
          description: List of attributes
          type: array
          items:
            $ref: "#/components/schemas/Attribute"
      required:
        - name
        - idAttribute

    EntityList:
      type: object
      description: List of entities
      properties:
        entities:
          type: array
          items:
            $ref: "#/components/schemas/Entity"

    Attribute:
      type: object
      description: Entity attribute
      properties:
        name:
          description: Name
          type: string
        type:
          description: Attribute type
          type: string
          enum: ["SIMPLE", "KEY_AND_DISPLAY"]
        dataType:
          $ref: "#/components/schemas/DataType"

    ValueDisplay:
      type: object
      description: Attribute value and optional display string
      properties:
        value:
          description: Literal value
          $ref: "#/components/schemas/Literal"
        display:
          type: string
          description: Optional display string
          nullable: true

    Literal:
      type: object
      description: Union of references to each value type. Exactly one will be populated based on the dataType.
      nullable: true
      properties:
        dataType:
          $ref: "#/components/schemas/DataType"
        valueUnion:
          type: object
          properties:
            boolVal:
              type: boolean
            int64Val:
              type: integer
              format: int64
            stringVal:
              type: string
            dateVal:
              type: string
              description: Format YYYY-MM-DD
            timestampVal:
              type: string
              description: Format YYYY-MM-DD hh:mm:ss
            doubleVal:
              type: number
              format: double

    DataType:
      type: string
      enum: ["INT64", "STRING", "BOOLEAN", "DATE", "TIMESTAMP", "DOUBLE"]

    Query:
      type: object
      description: Query for entity instances
      properties:
        includeAttributes:
          description: Attributes to include in the returned instances
          type: array
          items:
            type: string
        includeHierarchyFields:
          description: Hierarchy fields to include in the returned instances. All fields will be returned for each hierarchy specified.
          type: object
          properties:
            hierarchies:
              type: array
              description: Hierarchy names
              items:
                type: string
            fields:
              type: array
              items:
                type: string
                enum: ["IS_MEMBER", "PATH", "NUM_CHILDREN", "IS_ROOT"]
        includeRelationshipFields:
          description: Relationship (count) fields to include in the returned instances.
          type: array
          items:
            type: object
            description: Related entity and optional hierarchies. Per-node rollups are always returned.
            properties:
              relatedEntity:
                type: string
              hierarchies:
                type: array
                description: Hierarchy names
                items:
                  type: string
        filter:
          $ref: "#/components/schemas/Filter"
        orderBys:
          type: array
          description: Attributes and direction to order the results by
          items:
            type: object
            description: Attribute or relationship (count) field and the direction
            properties:
              attribute:
                type: string
              relationshipField:
                type: object
                properties:
                  relatedEntity:
                    type: string
                  hierarchy:
                    type: string
              direction:
                $ref: "#/components/schemas/OrderByDirection"
        limit:
          $ref: "#/components/schemas/Limit"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    CountQuery:
      type: object
      description: Count entity instances
      properties:
        attributes:
          description: |
            Attributes to group by. One count will be returned for each possible combination of attribute values 
            (e.g. [gender, hair_color] will return counts for man+red, man+black, woman+red, woman+black).
          type: array
          items:
            type: string
        filter:
          $ref: "#/components/schemas/Filter"

    HintQuery:
      type: object
      description: Get display hints
      properties:
        relatedEntity:
          description: |
            Optional related entity.
            If specified, then we return hints computed across related instances (e.g. condition occurrences where condition id=11).
            Otherwise, we return hints computed across all instances (e.g. all persons).
          type: object
          properties:
            name:
              type: string
              description: Related entity name
            id:
              $ref: "#/components/schemas/Literal"

    ReviewQuery:
      type: object
      description: Query for review instances and annotations
      properties:
        includeAttributes:
          description: Attributes to include in the returned instances
          type: array
          items:
            type: string
        entityFilter:
          $ref: "#/components/schemas/Filter"
        annotationFilter:
          $ref: "#/components/schemas/AnnotationFilter"
        orderBys:
          type: array
          description: Attributes or annotations, and direction to order the results by
          items:
            type: object
            description: Attribute or annotation and the direction
            properties:
              attribute:
                type: string
                description: Name of the attribute
              annotation:
                type: string
                description: ID of the annotation
              direction:
                $ref: "#/components/schemas/OrderByDirection"
        limit:
          $ref: "#/components/schemas/Limit"
        pageSize:
          $ref: "#/components/schemas/PageSize"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    ReviewCountQuery:
      type: object
      description: Count review instances
      properties:
        attributes:
          description: |
            Attributes to group by. One count will be returned for each possible combination of attribute values 
            (e.g. [gender, hair_color] will return counts for man+red, man+black, woman+red, woman+black).
          type: array
          items:
            type: string

    Filter:
      type: object
      description: Union of references to each filter type. Exactly one should be specified based on the filterType.
      properties:
        filterType:
          type: string
          enum:
            ["ATTRIBUTE", "TEXT", "HIERARCHY", "RELATIONSHIP", "BOOLEAN_LOGIC"]
        filterUnion:
          type: object
          properties:
            attributeFilter:
              $ref: "#/components/schemas/AttributeFilter"
            textFilter:
              $ref: "#/components/schemas/TextFilter"
            hierarchyFilter:
              $ref: "#/components/schemas/HierarchyFilter"
            relationshipFilter:
              $ref: "#/components/schemas/RelationshipFilter"
            booleanLogicFilter:
              $ref: "#/components/schemas/BooleanLogicFilter"

    AttributeFilter:
      type: object
      description: Filter on an attribute value (e.g. color=red)
      properties:
        attribute:
          type: string
        operator:
          $ref: "#/components/schemas/BinaryOperator"
        value:
          $ref: "#/components/schemas/Literal"

    TextFilter:
      type: object
      description: Filter on a text search (e.g. person sounds like Joe)
      properties:
        matchType:
          type: string
          enum: ["EXACT_MATCH", "FUZZY_MATCH"]
        attribute:
          type: string
          description: |
            Attribute to match on. If not specified, then we match on whatever is specified in the text search mapping config.
            Currently, fuzzy match only works on a single attribute (i.e. you must specify this field for fuzzy match).
        text:
          type: string

    HierarchyFilter:
      type: object
      description: Filter on a hierarchy (e.g. descendant of id=12)
      properties:
        hierarchy:
          description: Name of the hierarchy
          type: string
        operator:
          type: string
          enum: ["CHILD_OF", "DESCENDANT_OF_INCLUSIVE", "IS_ROOT", "IS_MEMBER"]
        value:
          $ref: "#/components/schemas/Literal"

    RelationshipFilter:
      type: object
      description: |
        Filter on a relationship between entities (e.g. condition occurrences where condition=diabetes).
        If the group_by_count_operator is set, then the group_by_count_value must also be set.
        The group_by_count_attribute is optional. If undefined, we group by the id only.
        When group_by fields are set, we filter on # of related entity instances.
        e.g. filter person instances with >2 related condition_occurrence instances
      properties:
        entity:
          type: string
        subfilter:
          $ref: "#/components/schemas/Filter"
        group_by_count_attribute:
          type: string
        group_by_count_operator:
          $ref: "#/components/schemas/BinaryOperator"
        group_by_count_value:
          type: integer
          nullable: true

    BooleanLogicFilter:
      type: object
      description: |
        Compose multiple filters (e.g. color=red AND capacity=3, NOT color=red). 
        The NOT operator only allows a single subfilter. The OR and AND operators require more than one subfilter.
      properties:
        operator:
          type: string
          enum: ["AND", "OR", "NOT"]
        subfilters:
          type: array
          items:
            $ref: "#/components/schemas/Filter"

    AnnotationFilter:
      type: object
      description: Filter on an annotation value (e.g. reviewStatus=complete)
      properties:
        annotation:
          type: string
        operator:
          type: string
          enum: ["EQUALS", "NOT_EQUALS", "LESS_THAN", "GREATER_THAN"]
        value:
          $ref: "#/components/schemas/Literal"

    OrderByDirection:
      type: string
      description: Defaults to ascending
      enum: ["ASCENDING", "DESCENDING"]

    Limit:
      type: integer
      description: Maximum number of results to return. Defaults to 250.
      default: 250

    Instance:
      type: object
      properties:
        attributes:
          description: A map of entity attribute names to their value for this instance. Only the attributes requested are populated.
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplay"
        hierarchyFields:
          description: Hierarchy field values for this instance. One set of values per hierarchy. Only the values requested are populated.
          type: array
          items:
            type: object
            properties:
              hierarchy:
                type: string
              isMember:
                type: boolean
              path:
                type: string
              numChildren:
                type: integer
              isRoot:
                type: boolean
        relationshipFields:
          description: Relationship field values for this instance. Only the values requested are populated.
          type: array
          items:
            type: object
            properties:
              relatedEntity:
                type: string
              hierarchy:
                type: string
              count:
                type: integer
              displayHints:
                type: string

    InstanceListResult:
      type: object
      description: List of instances
      properties:
        sql:
          type: string
        instances:
          type: array
          items:
            $ref: "#/components/schemas/Instance"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    InstanceCount:
      type: object
      properties:
        count:
          type: integer
        attributes:
          description: A map of entity attribute names to their value for this group
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplay"

    InstanceCountList:
      type: object
      description: List of instance counts
      properties:
        sql:
          type: string
        instanceCounts:
          type: array
          items:
            $ref: "#/components/schemas/InstanceCount"

    DisplayHint:
      type: object
      description: Display hint for entity attribute
      properties:
        attribute:
          $ref: "#/components/schemas/Attribute"
        displayHint:
          type: object
          description: Display hint calculated from source data
          properties:
            enumHint:
              $ref: "#/components/schemas/DisplayHintEnum"
            numericRangeHint:
              $ref: "#/components/schemas/DisplayHintNumericRange"

    DisplayHintEnum:
      type: object
      description: Enumeration of possible values, display strings, and counts
      properties:
        enumHintValues:
          type: array
          items:
            type: object
            description: Enum value and count
            properties:
              enumVal:
                $ref: "#/components/schemas/ValueDisplay"
              count:
                type: integer

    DisplayHintNumericRange:
      type: object
      description: Maximum and minimum values
      properties:
        min:
          description: Max value
          type: number
          format: double
        max:
          description: Min value
          type: number
          format: double

    DisplayHintList:
      type: object
      description: List of display hints
      properties:
        sql:
          type: string
        displayHints:
          type: array
          items:
            $ref: "#/components/schemas/DisplayHint"

    Study:
      type: object
      required: [id, created, createdBy, lastModified]
      properties:
        id:
          $ref: "#/components/schemas/StudyId"
        displayName:
          $ref: "#/components/schemas/StudyDisplayName"
        description:
          $ref: "#/components/schemas/StudyDescription"
        properties:
          $ref: "#/components/schemas/Properties"
        created:
          type: string
          format: date-time
        createdBy:
          description: Email of user who created the study
          type: string
        lastModified:
          type: string
          format: date-time
        isDeleted:
          type: boolean
          nullable: false

    StudyList:
      type: array
      items:
        $ref: "#/components/schemas/Study"

    StudyCreateInfo:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/StudyId"
        displayName:
          $ref: "#/components/schemas/StudyDisplayName"
        description:
          $ref: "#/components/schemas/StudyDescription"
        properties:
          $ref: "#/components/schemas/Properties"

    StudyUpdateInfo:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/StudyDisplayName"
        description:
          $ref: "#/components/schemas/StudyDescription"

    StudyId:
      type: string
      description: ID of the study, immutable

    StudyDisplayName:
      type: string
      description: Human readable name of the study

    StudyDescription:
      type: string
      description: Description of the study

    Properties:
      description: List of key-value pairs of strings
      type: array
      items:
        $ref: "#/components/schemas/PropertyKeyValue"

    # There seems to be a bug in the TS code generator that fails to create
    # proper objects for these when they're nested directy inside Properties.
    # It instead leaves them as untyped "object". My best guess is that it's
    # cause by having an array as the top level object and it fails to generate
    # a nested type for that case like for nested objects under other objects.
    # I've moved it out into a separate top level type as a workaround.
    PropertyKeyValue:
      type: object
      required: [key, value]
      properties:
        key:
          description: |
            String to identify the key. Keys must be 1-1024 characters, using letters,
            numbers, dashes, and underscores and must not start with a dash or underscore.
          type: string
        value:
          description: Arbitrary string value
          type: string

    PropertyKeys:
      description: List of property keys
      type: array
      items:
        type: string

    Cohort:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CohortId"
        revisionId:
          description: ID of the cohort revision, if frozen, null otherwise
          $ref: "#/components/schemas/CohortRevisionId"
          nullable: true
        underlayName:
          $ref: "#/components/schemas/UnderlayName"
        displayName:
          $ref: "#/components/schemas/CohortDisplayName"
        description:
          $ref: "#/components/schemas/CohortDescription"
        criteriaGroupSections:
          type: array
          description: Criteria group sections that define the entity filter
          items:
            $ref: "#/components/schemas/CriteriaGroupSection"
        created:
          description: Timestamp of when the cohort was created
          type: string
          format: date-time
        createdBy:
          description: Email of user who created cohort
          type: string
        lastModified:
          description: Timestamp of when the cohort was last modified
          type: string
          format: date-time
        isDeleted:
          type: boolean
      required:
        - id
        - underlayName
        - displayName
        - criteriaGroups
        - created
        - createdBy
        - lastModified

    CohortList:
      type: array
      items:
        $ref: "#/components/schemas/Cohort"

    CohortId:
      type: string
      description: ID of the cohort, immutable

    CohortRevisionId:
      type: string
      description: ID of a frozen cohort revision, immutable

    CohortCreateInfo:
      type: object
      properties:
        underlayName:
          $ref: "#/components/schemas/UnderlayName"
        displayName:
          $ref: "#/components/schemas/CohortDisplayName"
        description:
          $ref: "#/components/schemas/CohortDescription"

    CohortUpdateInfo:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/CohortDisplayName"
        description:
          $ref: "#/components/schemas/CohortDescription"
        criteriaGroupSections:
          type: array
          description: Criteria group sections that define the entity filter
          items:
            $ref: "#/components/schemas/CriteriaGroupSection"

    CohortDisplayName:
      type: string
      description: Human readable name of the cohort

    CohortDescription:
      type: string
      description: Description of the cohort

    ConceptSet:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ConceptSetId"
        underlayName:
          $ref: "#/components/schemas/UnderlayName"
        entity:
          $ref: "#/components/schemas/EntityName"
        displayName:
          $ref: "#/components/schemas/ConceptSetDisplayName"
        description:
          $ref: "#/components/schemas/ConceptSetDescription"
        criteria:
          $ref: "#/components/schemas/Criteria"
        created:
          description: Timestamp of when the concept set was created
          type: string
          format: date-time
        createdBy:
          description: Email of user who created the concept set
          type: string
        lastModified:
          description: Timestamp of when the concept set was last modified
          type: string
          format: date-time
      required:
        - id
        - underlayName
        - entity
        - displayName
        - criteria
        - created
        - createdBy
        - lastModified

    ConceptSetList:
      type: array
      items:
        $ref: "#/components/schemas/ConceptSet"

    ConceptSetId:
      type: string
      description: ID of the concept set, immutable

    ConceptSetCreateInfo:
      type: object
      properties:
        underlayName:
          $ref: "#/components/schemas/UnderlayName"
        entity:
          $ref: "#/components/schemas/EntityName"
        displayName:
          $ref: "#/components/schemas/ConceptSetDisplayName"
        description:
          $ref: "#/components/schemas/ConceptSetDescription"
        criteria:
          $ref: "#/components/schemas/Criteria"

    ConceptSetUpdateInfo:
      type: object
      properties:
        entity:
          $ref: "#/components/schemas/EntityName"
        displayName:
          $ref: "#/components/schemas/ConceptSetDisplayName"
        description:
          $ref: "#/components/schemas/ConceptSetDescription"
        criteria:
          $ref: "#/components/schemas/Criteria"

    EntityName:
      type: string
      description: Name of the entity (e.g. condition_occurrence)

    ConceptSetDisplayName:
      type: string
      description: Human readable name of the concept set

    ConceptSetDescription:
      type: string
      description: Description of the concept set

    UnderlayName:
      type: string
      description: Name of the underlay, immutable

    CriteriaGroupSection:
      type: object
      description: Section of criteria groups and boolean logic operators to combine them
      properties:
        id:
          type: string
          description: ID of the section, immutable
        displayName:
          type: string
          description: Name of the section
        criteriaGroups:
          type: array
          description: Set of criteria groups in the section
          items:
            $ref: "#/components/schemas/CriteriaGroup"
        operator:
          type: string
          description: Operator to use when combining the criteria groups in the section
          enum: ["AND", "OR"]
        excluded:
          type: boolean
          description: True to exclude the section, false to include it
      required:
        - id
        - displayName
        - criteriaGroups
        - operator
        - excluded

    CriteriaGroup:
      type: object
      description: Group of related criteria (primary + modifiers)
      properties:
        id:
          type: string
          description: ID of the group, immutable
        displayName:
          type: string
          description: Name of the group
        criteria:
          type: array
          description: Set of criteria in the group
          items:
            $ref: "#/components/schemas/Criteria"
        entity:
          description: Entity referenced by the criteria
          type: string
        groupByCountOperator:
          description: Operator to use for the optional group by count modifier
          $ref: "#/components/schemas/BinaryOperator"
        groupByCountValue:
          type: integer
          description: Value to use for the optional group by count modifier
          nullable: true
      required:
        - id
        - displayName
        - criteria
        - entity

    Criteria:
      type: object
      description: Single criteria for a cohort or concept set definition
      properties:
        id:
          type: string
          description: ID of the criteria, immutable
        displayName:
          type: string
          description: Name of the criteria
        pluginName:
          type: string
          description: Name of the plugin that generated this criteria
        pluginVersion:
          type: integer
          description: Version of the plugin that generated this criteria
        selectionData:
          type: string # JSON formatted
          description: Serialized plugin-specific representation of the user's selection
        uiConfig:
          # TODO: Remove this uiConfig property from the service API once we fully support UI plugins, because it
          # should be identical to the static config stored in the underlay. For now, we save it separately for
          # each criteria so we can handle schema changes in the UI code instead of in plugin-specific backend code.
          type: string # JSON formatted
          description: Serialized plugin-specific UI configuration for the criteria
        tags:
          description: Unstructured key-value tags for the criteria
          type: object
          additionalProperties:
            type: string
            nullable: true
      required:
        - id
        - displayName
        - pluginName
        - selectionData
        - uiConfig
        - tags

    Review:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ReviewId"
        displayName:
          $ref: "#/components/schemas/ReviewDisplayName"
        description:
          $ref: "#/components/schemas/ReviewDescription"
        size:
          $ref: "#/components/schemas/ReviewSize"
        cohort:
          $ref: "#/components/schemas/Cohort"
        created:
          description: Timestamp of when the review was created
          type: string
          format: date-time
        createdBy:
          description: Email of user who created the review
          type: string
        lastModified:
          description: Timestamp of when the review was last modified
          type: string
          format: date-time
      required:
        - id
        - displayName
        - size
        - cohortRevision
        - created
        - createdBy
        - lastModified

    ReviewList:
      type: array
      items:
        $ref: "#/components/schemas/Review"

    ReviewCreateInfo:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/ReviewDisplayName"
        description:
          $ref: "#/components/schemas/ReviewDescription"
        size:
          $ref: "#/components/schemas/ReviewSize"
        filter:
          # TODO: Remove this filter property from the service API once we fully support UI plugins, because the
          # plugin-specific backend code will generate it from the cohort definition. For now, the UI builds the
          # cohort filter and passes it to the backend when we create a review, so the backend can take a random
          # sample and preserve it.
          $ref: "#/components/schemas/Filter"
      required:
        - displayName
        - size
        - filter

    ReviewUpdateInfo:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/ReviewDisplayName"
        description:
          $ref: "#/components/schemas/ReviewDescription"

    ReviewId:
      type: string
      description: ID of the review, immutable

    ReviewDisplayName:
      type: string
      description: Human readable name of the review

    ReviewDescription:
      type: string
      description: Description of the review

    ReviewSize:
      type: integer
      description: Number of primary entity instances included in the review

    Annotation:
      type: object
      properties:
        id:
          description: ID of the annotation, immutable
          type: string
        displayName:
          $ref: "#/components/schemas/AnnotationDisplayName"
        description:
          $ref: "#/components/schemas/AnnotationDescription"
        dataType:
          $ref: "#/components/schemas/DataType"
        enumVals:
          type: array
          description: |
            May only be set if dataType=STRING. Annotation value must be one of
            enumVals.
          items:
            type: string
      required:
        - id
        - displayName
        - dataType

    AnnotationList:
      type: array
      items:
        $ref: "#/components/schemas/Annotation"

    AnnotationCreateInfo:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/AnnotationDisplayName"
        description:
          $ref: "#/components/schemas/AnnotationDescription"
        dataType:
          $ref: "#/components/schemas/DataType"
        enumVals:
          type: array
          description: |
            May only be set if dataType=STRING. Annotation value must be one of
            enumVals.
          items:
            type: string
      required:
        - displayName
        - dataType

    AnnotationUpdateInfo:
      type: object
      properties:
        displayName:
          $ref: "#/components/schemas/AnnotationDisplayName"
        description:
          $ref: "#/components/schemas/AnnotationDescription"

    AnnotationDisplayName:
      type: string
      description: Human readable name of the annotation

    AnnotationDescription:
      type: string
      description: Description of the annotation

    AnnotationValue:
      type: object
      properties:
        instanceId:
          description: ID of the annotation value, immutable
          type: string
        value:
          $ref: "#/components/schemas/Literal"
        isMostRecent:
          type: boolean
        isPartOfSelectedReview:
          type: boolean
      required:
        - instanceId
        - value
        - isMostRecent
        - isPartOfSelectedReview

    ReviewInstance:
      type: object
      properties:
        stableIndex:
          description: Index of the instance, unchanged when sorting
          type: integer
        attributes:
          description: |
            A map of entity attribute names to their value for this instance. The id attribute will always be included.
          type: object
          additionalProperties:
            type: object
            nullable: true
            $ref: "#/components/schemas/ValueDisplay"
        annotations:
          description: A map of annotation ids to their values for this instance in this review
          type: object
          additionalProperties:
            type: array
            nullable: true
            items:
              $ref: "#/components/schemas/AnnotationValue"

    ReviewInstanceListResult:
      type: object
      description: List of instances
      properties:
        sql:
          type: string
        instances:
          type: array
          items:
            $ref: "#/components/schemas/ReviewInstance"
        pageMarker:
          $ref: "#/components/schemas/PageMarker"

    VumcAdminServiceTest:
      type: object
      properties:
        version:
          type: string
        round-trip:
          type: string

    ExportRequest:
      type: object
      properties:
        exportModel:
          description: Name of the export model to use
          type: string
        inputs:
          description: Key-value map of the export model inputs (e.g. filenamePrefix=test)
          type: object
          additionalProperties:
            type: string
            nullable: true
        redirectBackUrl:
          type: string
          nullable: true
        study:
          type: string
          nullable: false
        cohorts:
          description: List of cohort ids
          type: array
          items:
            type: string
        includeAnnotations:
          description: Include the annotation data when true
          type: boolean
        instanceQuerys:
          # TODO: Replace this with a list of concept set ids once we can build the entity filters on the backend.
          type: array
          items:
            type: object
            properties:
              entity:
                type: string
                nullable: false
              query:
                $ref: "#/components/schemas/Query"
        primaryEntityFilter:
          # TODO: Remove this filter property from the service API once we fully support UI plugins, because the
          # plugin-specific backend code will generate it from the cohort definition. For now, the UI builds the
          # cohort filter and passes it to the backend when we export a cohort(s), so the backend can count the
          # number of records and store it in the activity log.
          $ref: "#/components/schemas/Filter"

    ExportResult:
      type: object
      properties:
        status:
          type: string
          enum: [ "RUNNING", "COMPLETE" ]
        redirectAwayUrl:
          type: string
          nullable: true
        outputs:
          description: Key-value map of the export model outputs (e.g. signedUrl=gs://... )
          type: object
          additionalProperties:
            type: string

    ExportModel:
      type: object
      properties:
        name:
          type: string
          nullable: false
        displayName:
          type: string
          nullable: false
        description:
          type: string
          nullable: true
        inputs:
          description: Map of input parameter names to descriptions
          type: object
          additionalProperties:
            type: string
            nullable: true
        outputs:
          description: Map of output parameters names to descriptions
          type: object
          additionalProperties:
            type: string
            nullable: true

    ExportModelList:
      type: array
      items:
        $ref: "#/components/schemas/ExportModel"

    ResourceType:
      type: string
      enum: [ "STUDY", "COHORT", "REVIEW" ]

    Resource:
      type: object
      properties:
        type:
          $ref: "#/components/schemas/ResourceType"
          nullable: false
        studyId:
          $ref: "#/components/schemas/StudyId"
          nullable: false
        studyDisplayName:
          $ref: "#/components/schemas/StudyDisplayName"
          nullable: true
        studyProperties:
          $ref: "#/components/schemas/Properties"
          nullable: true
        cohortId:
          $ref: "#/components/schemas/CohortId"
          nullable: true
        cohortDisplayName:
          $ref: "#/components/schemas/CohortDisplayName"
          nullable: true
        cohortRevisionId:
          $ref: "#/components/schemas/CohortRevisionId"
          nullable: true
        reviewId:
          $ref: "#/components/schemas/ReviewId"
          nullable: true
        reviewDisplayName:
          $ref: "#/components/schemas/ReviewDisplayName"
          nullable: true
      required:
        - type
        - studyId

    ActivityType:
      type: string
      enum: [ "CREATE_STUDY", "DELETE_STUDY", "CREATE_COHORT", "DELETE_COHORT", "EXPORT_COHORT", "CREATE_REVIEW", "DELETE_REVIEW" ]

    ActivityLogEntry:
      type: object
      properties:
        id:
          type: string
          nullable: false
        userEmail:
          type: string
          nullable: false
        logged:
          type: string
          format: date-time
          nullable: false
        systemVersion:
          $ref: "#/components/schemas/SystemVersion"
          nullable: false
        activityType:
          $ref: "#/components/schemas/ActivityType"
          nullable: false
        resources:
          type: array
          items:
            $ref: "#/components/schemas/Resource"
        additionalInfo:
          description: Additional information for specific activity types
          type: object
          properties:
            exportModel:
              description: (EXPORT_COHORT) Name of the export model used
              type: string
              nullable: true
            recordsCount:
              description: (EXPORT_COHORT, CREATE_REVIEW) Number of primary entity records involved
              type: integer
              format: int64
              nullable: true
      required:
        - id
        - userEmail
        - logged
        - systemVersion
        - activityType

    ActivityLogEntryList:
      type: array
      items:
        $ref: "#/components/schemas/ActivityLogEntry"

    ErrorReport:
      type: object
      required: [message, statusCode, causes]
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string

    PageSize:
      type: integer

    PageMarker:
      type: string

    BinaryOperator:
      type: string
      enum:
        [
          "EQUALS",
          "NOT_EQUALS",
          "LESS_THAN",
          "GREATER_THAN",
          "LESS_THAN_OR_EQUAL",
          "GREATER_THAN_OR_EQUAL",
        ]

  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
    bearerAuth:
      type: http
      scheme: bearer

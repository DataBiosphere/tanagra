# Study-Cohort APIs, parameters & schema objects

paths:
  /createListCohort:
    parameters:
    - $ref: './studies.yaml#/components/parameters/StudyId'
    get:
      description: List all cohorts in a study
      operationId: listCohorts
      tags: [ Cohorts ]
      parameters:
      - $ref: './common.yaml#/components/parameters/Offset'
      - $ref: './common.yaml#/components/parameters/Limit'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortList'
        500:
          $ref: './common.yaml#/components/responses/ServerError'
    post:
      description: Create a new cohort
      operationId: createCohort
      tags: [ Cohorts ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortCreateInfo'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          $ref: './common.yaml#/components/responses/BadRequest'
        500:
          $ref: './common.yaml#/components/responses/ServerError'

  /getUpdateDeleteCohort:
    parameters:
    - $ref: './studies.yaml#/components/parameters/StudyId'
    - $ref: '#/components/parameters/CohortId'
    - $ref: '#/components/parameters/CohortRevisionId'
    get:
      description: Get an existing cohort
      operationId: getCohort
      tags: [ Cohorts ]
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        404:
          $ref: './common.yaml#/components/responses/NotFound'
        500:
          $ref: './common.yaml#/components/responses/ServerError'
    patch:
      description: Update an existing cohort
      operationId: updateCohort
      tags: [ Cohorts ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortUpdateInfo'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          $ref: './common.yaml#/components/responses/BadRequest'
        404:
          $ref: './common.yaml#/components/responses/NotFound'
        500:
          $ref: './common.yaml#/components/responses/ServerError'
    delete:
      description: Delete a cohort
      operationId: deleteCohort
      tags: [ Cohorts ]
      responses:
        204:
          $ref: './common.yaml#/components/responses/NoContent'
        404:
          $ref: './common.yaml#/components/responses/NotFound'
        500:
          $ref: './common.yaml#/components/responses/ServerError'

  /queryCohortCounts:
    parameters:
    - $ref: './studies.yaml#/components/parameters/StudyId'
    - $ref: '#/components/parameters/CohortId'
    post:
      description: Run a count query for a cohort
      operationId: queryCohortCounts
      tags: [ Cohorts ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortCountQuery'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: './underlays_entity.yaml#/components/schemas/InstanceCountList'
        400:
          $ref: './common.yaml#/components/responses/BadRequest'
        404:
          $ref: './common.yaml#/components/responses/NotFound'
        500:
          $ref: './common.yaml#/components/responses/ServerError'

components:
  parameters:
    CohortId:
      description: ID of the cohort
      name: cohortId
      in: path
      required: true
      schema:
        type: string

    CohortRevisionId:
      description: ID of the cohort revision
      name: cohortRevisionId
      in: query
      required: false
      schema:
        type: string

  schemas:
    CohortList:
      type: array
      items:
        $ref: '#/components/schemas/Cohort'

    Cohort:
      type: object
      required: [ id, underlayName, displayName, criteriaGroups, created,
                  createdBy, lastModified ]
      properties:
        id:
          $ref: '#/components/schemas/CohortId'
        revisionId:
          $ref: '#/components/schemas/CohortRevisionId'
        underlayName:
          $ref: './underlays.yaml#/components/schemas/UnderlayName'
        displayName:
          $ref: '#/components/schemas/CohortDisplayName'
        description:
          $ref: '#/components/schemas/CohortDescription'
        criteriaGroupSections:
          description: Criteria group sections that define the entity filter
          type: array
          items:
            $ref: './underlays_entity.yaml#/components/schemas/CriteriaGroupSection'
        created:
          description: Timestamp of when the cohort was created
          type: string
          format: date-time
        createdBy:
          description: Email of user who created cohort
          type: string
        lastModified:
          description: Timestamp of when the cohort was last modified
          type: string
          format: date-time
        isDeleted:
          type: boolean

    CohortId:
      description: ID of the cohort, immutable
      type: string

    CohortRevisionId:
      description: ID of a frozen cohort revision, immutable
      type: string

    CohortDisplayName:
      description: Human readable name of the cohort
      type: string

    CohortDescription:
      description: Description of the cohort
      type: string

    CohortCreateInfo:
      type: object
      properties:
        underlayName:
          $ref: './underlays.yaml#/components/schemas/UnderlayName'
        displayName:
          $ref: '#/components/schemas/CohortDisplayName'
        description:
          $ref: '#/components/schemas/CohortDescription'

    CohortUpdateInfo:
      type: object
      properties:
        displayName:
          $ref: '#/components/schemas/CohortDisplayName'
        description:
          $ref: '#/components/schemas/CohortDescription'
        criteriaGroupSections:
          description: Criteria group sections that define the entity filter
          type: array
          items:
            $ref: './underlays_entity.yaml#/components/schemas/CriteriaGroupSection'

    CohortCountQuery:
      description: Count output entity instances for a cohort filter
      type: object
      required: [ groupByAttributes ]
      properties:
        criteriaGroupSectionId:
          type: string
        criteriaGroupId:
          type: string
        entity:
          description: Entity to count. Defaults to primary entity
          type: string
        countDistinctAttribute:
          description: Attribute to count (e.g. person_id will return counts 
            for the number of distinct person_ids per group by combination).
            Defaults to id attribute
          type: string
        groupByAttributes:
          description: Attributes to group by. One count will be returned for
            each possible combination of attribute values (e.g. [gender,
            hair_color] will return counts for man+red, man+black, woman+red,
            woman+black)
          type: array
          items:
            type: string
        orderByDirection:
          $ref: './common.yaml#/components/schemas/OrderByDirection'
        limit:
          $ref: './common.yaml#/components/schemas/Limit'
        pageSize:
          $ref: './common.yaml#/components/schemas/PageSize'
        pageMarker:
          $ref: './common.yaml#/components/schemas/PageMarker'

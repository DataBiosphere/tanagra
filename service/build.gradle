import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
    id 'tanagra.java-conventions'

    id 'com.google.cloud.tools.jib' version '3.3.0'
    id 'io.spring.dependency-management' version "${vSpringDepMgt}"
    id 'org.springframework.boot' version "${vSpringBoot}"
    id 'org.hidetake.swagger.generator' version "${vHidetakeSwagger}"
    id 'org.barfuin.gradle.taskinfo' version '2.2.0'
    id 'net.linguica.maven-settings' version '0.5'
    id 'com.google.protobuf' version "${vGoogleProtobuf}"
}

sourceCompatibility = JavaVersion.VERSION_17

ext {
    resourceDir = "${projectDir}/src/main/resources"
}

repositories {
    mavenCentral()
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-release/'
    }
    maven {
        url 'https://broadinstitute.jfrog.io/broadinstitute/libs-snapshot-local/'
    }
    maven {
        url 'https://packages.confluent.io/maven/'
    }
    maven {
        name 'github'
        url 'https://maven.pkg.github.com/vanderbilt/tanagra-client-libraries'
        credentials {
            // Credentials required to access tanagra-client-libraries,
            // GITHUB_ACTOR: user running build task
            // GITHUB_TOKEN: user token or workflow token that grants access to libraries
            username = System.getenv('GITHUB_ACTOR')
            password = System.getenv('GITHUB_TOKEN')
        }
    }
}

dependencyManagement {
    imports {
        mavenBom SpringBootPlugin.BOM_COORDINATES
    }
    dependencies {
        dependency "io.swagger.core.v3:swagger-annotations:${vSwaggerAnnotations}"
        dependency "io.swagger.codegen.v3:swagger-codegen-cli:${vSwaggerCodegen}"
    }
}

configurations.all {
    // excluded to avoid LoggerFactory conflicts (logback/slf4j)
    exclude group: 'ch.qos.logback', module: 'logback-classic'
}

dependencies {
    // added to address synk warnings
    constraints {
        implementation 'com.nimbusds:nimbus-jose-jwt:9.37.3'
    }

    implementation project(path: ':indexer')
    implementation project(":underlay")
    testImplementation(testFixtures(project(":underlay")))

    implementation "io.swagger.core.v3:swagger-annotations:${vSwaggerAnnotations}"
    swaggerCodegen "io.swagger.codegen.v3:swagger-codegen-cli:${vSwaggerCodegen}"

    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${vJackson}"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${vJackson}"
    implementation "com.fasterxml.jackson.core:jackson-core:${vJackson}"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${vJackson}"
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'

    implementation 'org.webjars:webjars-locator-core:0.58'
    implementation 'org.webjars.npm:swagger-ui-dist:5.17.12'

    implementation "org.apache.commons:commons-text:${vApacheCommonsText}"
    implementation 'org.apache.commons:commons-dbcp2'
    implementation 'org.apache.commons:commons-pool2'
    implementation 'jakarta.validation:jakarta.validation-api'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'jakarta.ws.rs:jakarta.ws.rs-api:4.0.0'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.78.1'

    implementation("bio.terra:terra-common-lib:${vTerraCommonLib}") {
        // excluded since they are not needed, avoid vuln & mismatches
        exclude group: 'bio.terra', module: 'stairway'
        exclude group: 'bio.terra', module: 'stairway-azure'
        exclude group: 'bio.terra', module: 'stairway-gcp'
        exclude group: 'com.azure'
        exclude group: 'com.amazonaws'

        // excluded due to version mismatch
        exclude group: 'com.google.cloud.opentelemetry'
        exclude group: 'com.google.protobuf'
        exclude group: 'io.swagger', module: 'swagger-annotations'
        exclude group: 'io.opentelemetry'
        exclude group: 'io.opentelemetry.instrumentation'
    }

    // Spring version controlled dependencies
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.security:spring-security-core'

    // explicity declare libs and version to address synk warnings
    implementation "org.springframework:spring-context:${vSpringWeb}"
    implementation "org.springframework:spring-core:${vSpringWeb}"
    implementation "org.springframework:spring-web:${vSpringWeb}"
    implementation "org.springframework:spring-webmvc:${vSpringWeb}"
    testFixturesImplementation "org.springframework:spring-context:${vSpringWeb}"
    testFixturesImplementation "org.springframework:spring-core:${vSpringWeb}"
    testFixturesImplementation "org.springframework:spring-web:${vSpringWeb}"
    testFixturesImplementation "org.springframework:spring-webmvc:${vSpringWeb}"

    // [Application DB] MySQL/MariaDB
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.7.12'
    implementation 'com.mysql:mysql-connector-j:8.4.0'
    implementation 'com.google.cloud.sql:mysql-socket-factory-connector-j-8:1.18.1'

    // GCP libraries versions are controlled by the BOM specified in buildSrc.
    implementation 'com.google.cloud:google-cloud-bigquery'
    implementation 'com.google.cloud:google-cloud-storage'
    implementation 'com.google.guava:guava'

    implementation 'com.google.apis:google-api-services-oauth2:v2-rev20200213-2.0.0'

    // Spring version controlled JUnit dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.platform:junit-platform-runner'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    // Static analysis
    pmd "net.sourceforge.pmd:pmd-ant:${vPmd}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${vSpotBugs}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${vSpotBugs}"

    // [Access control]: VUMC admin service
    // Changed form javax->jakarta, so using jersey3
    implementation "org.glassfish.jersey.core:jersey-common:${vJersey}"
    implementation "org.glassfish.jersey.core:jersey-client:${vJersey}"
    implementation "org.glassfish.jersey.inject:jersey-hk2:${vJersey}"
    implementation "org.glassfish.jersey.media:jersey-media-multipart:${vJersey}"
    implementation "org.glassfish.jersey.media:jersey-media-json-jackson:${vJersey}"

    implementation 'org.vumc.vda.tanagra:admin-client:1.0.18-SNAPSHOT'

    // [Access control]: VerilyGroups
    implementation 'org.json:json:20240303'
}

protobuf {
    // Configure the protoc executable
    protoc {
        // This executable is downloaded from Maven.
        // The version here must match the Google Cloud libraries BOM specified in the buildSrc Gradle sub-project.
        // https://cloud.google.com/java/docs/bom
        // This com.google.protobuf plugin does not yet support using a BOM.
        // https://github.com/google/protobuf-gradle-plugin/issues/412
        // So we have to manually keep this version in sync, by referencing the BOM dashboard.
        // https://storage.googleapis.com/cloud-opensource-java-dashboard/com.google.cloud/libraries-bom/index.html
        artifact = 'com.google.protobuf:protoc:3.25.3'
    }
}

test {
    useJUnitPlatform() {
        excludeTags "regression-test"
    }
}

tasks.register('regressionTests', Test) {
    useJUnitPlatform {
        includeTags 'regression-test'
    }
}

tasks.withType(Test).configureEach {
    // These System properties are used for the generated SQL strings to compare against during tests.
    // See bio.terra.tanagra.testing.GeneratedSqlUtils for how they are used.
    systemProperty('GRADLE_PROJECT_DIR', projectDir)
    if (project.findProperty('generateSqlFiles')) {
        systemProperty('GENERATE_SQL_FILES', 'true')
    }

    // This System property is used to point at the directories that contain exported count regression test files.
    // See bio.terra.tanagra.regression.QueryCountRegressionTest for how it's used.
    if (project.findProperty('regressionTestDirs')) {
        systemProperty('REGRESSION_TEST_DIRS', project.findProperty('regressionTestDirs'))
    }
    if (project.findProperty('regressionTestUnderlays')) {
        systemProperty('REGRESSION_TEST_UNDERLAYS', project.findProperty('regressionTestUnderlays'))
    }
    if (project.findProperty('regressionTestFiles')) {
        systemProperty('REGRESSION_TEST_FILES', project.findProperty('regressionTestFiles'))
    }
}

String includeDir = "$projectDir/gradle"
apply from: "${includeDir}/jib.gradle"
apply from: "${includeDir}/open-api.gradle"
apply from: "${includeDir}/vumc_github.gradle"

apply from: "${rootDir}/gradle/spotless-dependencies.gradle"
